
Процедура УстановитьЭлементОтбора(ЭлементОтбораРеквизита, ЗначениеОтбора, ИспользованиеОтбора, РеквизитВСписке)
	Если РеквизитВСписке Тогда
		ЭлементОтбораРеквизита.ВидСравнения	= ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ЭлементОтбораРеквизита.ВидСравнения	= ВидСравненияКомпоновкиДанных.НеВСписке;
	КонецЕсли;
	ЭлементОтбораРеквизита.ПравоеЗначение	= ЗначениеОтбора;
	ЭлементОтбораРеквизита.Использование	= ИспользованиеОтбора;	
КонецПроцедуры

Функция ПечатнаяФормаРасчетногоЛистка(Выборка, ПараметрыЗапроса, ОтчетРасчетныйЛисток)
	Попытка
		Результат = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(   
			Выборка.ФизическоеЛицо,
			Выборка.ГоловнаяОрганизация,
			ПараметрыЗапроса.НачалоПериода,
			ПараметрыЗапроса.КонецПериода,
			ОтчетРасчетныйЛисток);
	Исключение
		// Начиная с Версии ЗУП 3.1.24.408			
		Результат = ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
			Выборка.ФизическоеЛицо, 
			Выборка.ГоловнаяОрганизация,
			ПараметрыЗапроса.НачалоПериода,
			ПараметрыЗапроса.КонецПериода,
			ОтчетРасчетныйЛисток);
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПечатнаяФормаРасчетногоЛисткаСПользовательскимиПараметрами(Выборка, ПараметрыЗапроса, ОтчетРасчетныйЛисток, ДопПараметры)
	ОтчетОбъектРЛ = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетОбъектРЛ.ИнициализироватьОтчет(ДопПараметры.КлючВарианта);           
	ВариантОтчета = ВариантыОтчетов.ВариантОтчета(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетОбъектРЛ.Метаданные()),
		ДопПараметры.КлючВарианта);
	СхемаКомпоновкиДанных = Отчеты.АнализНачисленийИУдержаний.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(
		ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки);
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(ВариантОтчета.Настройки.Получить());
	ОтчетОбъектРЛ.КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки.Получить());
	
	ЭлементОтбораФЛ = ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		ПараметрыЗапроса.ИдентификаторФизическоеЛицо);
	ЭлементОтбораФЛ.ПравоеЗначение	= Выборка.ФизическоеЛицо;
	ЭлементОтбораФЛ.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораФЛ.Использование	= Истина;	
	
	ЭлементОтбораПериод = ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		ПараметрыЗапроса.ИдентификаторПериод);
	Если ТипЗнч(ЭлементОтбораПериод.Значение) = Тип("СтандартныйПериод") Тогда
		ЭлементОтбораПериод.Значение.ДатаНачала 	= ПараметрыЗапроса.НачалоПериода;
		ЭлементОтбораПериод.Значение.ДатаОкончания 	= ПараметрыЗапроса.КонецПериода;
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораПериод.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ЭлементОтбораПериод.Значение.Дата = ПараметрыЗапроса.НачалоПериода;
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("ИдентификаторОрганизация") Тогда
		ЭлементОтбораРеквизита = ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			ПараметрыЗапроса.ИдентификаторОрганизация);
		УстановитьЭлементОтбора(
			ЭлементОтбораРеквизита,
			ДопПараметры.Организации,
			ДопПараметры.ОрганизацииЗаполнены,
			ДопПараметры.ОрганизацииВСписке);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("ИдентификаторПодразделение") Тогда
		ЭлементОтбораРеквизита = ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			ПараметрыЗапроса.ИдентификаторПодразделение);
		УстановитьЭлементОтбора(
			ЭлементОтбораРеквизита, 
			ДопПараметры.Подразделения, 
			ДопПараметры.ПодразделенияЗаполнены, 
			ДопПараметры.ПодразделенияВСписке);
	КонецЕсли;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		СхемаКомпоновкиДанных,
		КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ВнешниеНаборыДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);
	
	Результат = Новый ТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.УстановитьДокумент(Результат);
	ОтчетОбъектРЛ.СкомпоноватьРезультат(Результат); 
	Результат.АвтоМасштаб = Истина;
	
	Возврат Результат;
КонецФункции

Процедура КадровыйРасчетныйЛистокОбработкаРезультатаЗапроса(Выборка, ПараметрыЗапроса, 
	ПараметрыВызова, ВариантОтчета, ДопПараметры)
	
	ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток(ВариантОтчета);
	Если ДопПараметры.КлючВарианта = "РасчетныйЛисток" Тогда
		Результат = ПечатнаяФормаРасчетногоЛистка(
			Выборка,
			ПараметрыЗапроса,
			ОтчетРасчетныйЛисток);
		ДокументРезультат = Результат.ДокументРезультат;
	Иначе
		ДокументРезультат = ПечатнаяФормаРасчетногоЛисткаСПользовательскимиПараметрами(
			Выборка,
			ПараметрыЗапроса,
			ОтчетРасчетныйЛисток,
			ДопПараметры);
	КонецЕсли;
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		НазваниеПФ = "Расчетный листок от " + Формат(ПараметрыЗапроса.НачалоПериода, "ДЛФ=Д") 
			+ " по " + Формат(ПараметрыЗапроса.КонецПериода, "ДЛФ=Д") 
			+ " для " + Строка(Выборка.ФизическоеЛицо);
		Вложение = Новый Соответствие;  
		Вложение["Название"] = НазваниеПФ; 
		
		ФайлПРМ = "Файл";
		ПотокВПамяти = Новый ПотокВПамяти;
		Попытка
			ДокументРезультат.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
			ФайлBase64 = Base64Строка(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
			
			// отправка на СБИС Диск
			ИмяФайла = НазваниеПФ + ".pdf";
			context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения(); 
			ОбъектОбработки = Обработки.SABY.Создать();
			СсылкаНаPDF = Неопределено;
			СсылкаНаPDF = ОбъектОбработки.local_helper_convert_to_pdfa_to_disk_x(context_params, ФайлBase64, ИмяФайла);
			СсылкаНаСБИСДиск = Saby_Core.get_prop(СсылкаНаPDF, "FileId");
			// отправка на СБИС Диск
			
			// Прикреплённый файл
			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Вложение[ФайлПРМ] = Новый Соответствие;
			Вложение[ФайлПРМ].Вставить("Имя", НазваниеПФ + ".pdf");
			Вложение[ФайлПРМ].Вставить("Ссылка", СсылкаНаСБИСДиск);
			Вложение[ФайлПРМ].Вставить("ContentType", "application/pdf");
			МассивВложений = Новый Массив;
			МассивВложений.Добавить(Вложение);		
		Исключение
			ДокументРезультат.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.XLSX);
			ФайлBase64 = Base64Строка(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
			
			// отправка на СБИС Диск
			ИмяФайла = НазваниеПФ + ".xlsx";
			context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения(); 
			ОбъектОбработки = Обработки.SABY.Создать();
			СсылкаНаPDF = Неопределено;
			СсылкаНаPDF = ОбъектОбработки.local_helper_convert_to_pdfa_to_disk_x(context_params, ФайлBase64, ИмяФайла);
			СсылкаНаСБИСДиск = Saby_Core.get_prop(СсылкаНаPDF, "FileId");
			// отправка на СБИС Диск
			
			// Прикреплённый файл
			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Вложение[ФайлПРМ] = Новый Соответствие;
			Вложение[ФайлПРМ].Вставить("Имя", НазваниеПФ + ".xlsx");
			Вложение[ФайлПРМ].Вставить("Ссылка", СсылкаНаСБИСДиск);
			Вложение[ФайлПРМ].Вставить("ContentType", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			МассивВложений = Новый Массив;
			МассивВложений.Добавить(Вложение);	
		КонецПопытки;
		
		ПараметрыПКД = Новый Структура();
		ПараметрыПКД.Вставить("Регламент", saby_core.get_prop(ПараметрыЗапроса, "Регламент"));
		ПараметрыПКД.Вставить("ЕстьФильтрПоОрганизации", ПараметрыЗапроса.ЕстьФильтрПоОрганизации);
		ПараметрыПКД.Вставить("ЕстьФильтрПоСотрудникам", ПараметрыЗапроса.ЕстьФильтрПоСотрудникам);
		ПараметрыПКД.Вставить("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
		ПараметрыПКД.Вставить("КонецПериода", ПараметрыЗапроса.КонецПериода);
		ПараметрыПКД.Вставить("Организация", ВыборкаДетальныеЗаписи.Организация);
		ПараметрыПКД.Вставить("ФизическоеЛицо", ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		ПараметрыПКД.Вставить("Подразделение", ВыборкаДетальныеЗаписи.Подразделение);
		ПараметрыПКД.Вставить("Сотрудник", ВыборкаДетальныеЗаписи.Сотрудник);
		ПараметрыПКД.Вставить("_print_forms", МассивВложений);
		
		ПараметрыВызова.Добавить(ПараметрыПКД);
	КонецЕсли; 
КонецПроцедуры

Функция ДанныеНачисленийПоСотрудникам(ПараметрыЗапроса)
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ) КАК МесяцНачисления,
	| НачисленияИУдержания.Период КАК Период,
	| НачисленияИУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	| НачисленияИУдержания.Подразделение КАК Подразделение,
	| НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты КАК Группа,
	| НачисленияИУдержания.НачислениеУдержание КАК ВидРасчета,
	| СУММА(НачисленияИУдержания.Сумма) КАК Сумма,
	| НачисленияИУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	| НачисленияИУдержания.Сотрудник КАК Сотрудник,
	| НачисленияИУдержания.ДатаНачала КАК ДатаНачала,
	| НачисленияИУдержания.ДатаОкончания КАК ДатаОкончания,
	| НачисленияИУдержания.ПериодДействия КАК ПериодДействия,
	| НачисленияИУдержания.ДокументОснование КАК ДокументОснование,
	| НачисленияИУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	| ИСТИНА КАК НачислениеТекущегоПериода
	|ИЗ
	| РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияИУдержания
	|ГДЕ
	| НачисленияИУдержания.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
	| И ВЫБОР
	| КОГДА &ОрганизацииЗаполнены
	| ТОГДА НачисленияИУдержания.Организация В (&Организации)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ
	| И ВЫБОР
	| КОГДА &ФизическиеЛицаЗаполнены
	| ТОГДА НачисленияИУдержания.ФизическоеЛицо В (&ФизическиеЛица)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ
	| И ВЫБОР
	| КОГДА &ПодразделенияЗаполнены
	| ТОГДА НачисленияИУдержания.Подразделение В (&Подразделения)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	| НачисленияИУдержания.Период,
	| НачисленияИУдержания.ФизическоеЛицо,
	| НачисленияИУдержания.Подразделение,
	| НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты,
	| НачисленияИУдержания.НачислениеУдержание,
	| НачисленияИУдержания.Организация.ГоловнаяОрганизация,
	| НачисленияИУдержания.Сотрудник,
	| НачисленияИУдержания.ДатаНачала,
	| НачисленияИУдержания.ДатаОкончания,
	| НачисленияИУдержания.ПериодДействия,
	| НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ),
	| НачисленияИУдержания.ДокументОснование,
	| НачисленияИУдержания.ИдентификаторСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	| НАЧАЛОПЕРИОДА(НачисленияИУдержания.ПериодДействия, МЕСЯЦ),
	| НачисленияИУдержания.Период,
	| НачисленияИУдержания.ФизическоеЛицо,
	| НачисленияИУдержания.Подразделение,
	| НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты,
	| НачисленияИУдержания.НачислениеУдержание,
	| 0,
	| НачисленияИУдержания.Организация.ГоловнаяОрганизация,
	| НачисленияИУдержания.Сотрудник,
	| НачисленияИУдержания.ДатаНачала,
	| НачисленияИУдержания.ДатаОкончания,
	| НачисленияИУдержания.ПериодДействия,
	| НачисленияИУдержания.ДокументОснование,
	| НачисленияИУдержания.ИдентификаторСтроки,
	| ЛОЖЬ
	|ИЗ
	| РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияИУдержания
	|ГДЕ
	| НачисленияИУдержания.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
	| И НачисленияИУдержания.ПериодДействия <> НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ)
	| И ВЫБОР
	| КОГДА &ОрганизацииЗаполнены
	| ТОГДА НачисленияИУдержания.Организация В (&Организации)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ
	| И ВЫБОР
	| КОГДА &ФизическиеЛицаЗаполнены
	| ТОГДА НачисленияИУдержания.ФизическоеЛицо В (&ФизическиеЛица)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ
	| И ВЫБОР
	| КОГДА &ПодразделенияЗаполнены
	| ТОГДА НачисленияИУдержания.Подразделение В (&Подразделения)
	| ИНАЧЕ ИСТИНА
	| КОНЕЦ";   
	
	Для Каждого КлючЗнч Из ПараметрыЗапроса Цикл
		ЗапросНачисления.УстановитьПараметр(КлючЗнч.Ключ, КлючЗнч.Значение);
	КонецЦикла;
	РезультатЗапросаНачисления = ЗапросНачисления.Выполнить();
	Возврат РезультатЗапросаНачисления;
КонецФункции

Функция ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыЗапроса) Экспорт
	ПараметрыВызова = Новый Массив;	
	
	ФизическиеЛица 			= Новый СписокЗначений;
	ФизическиеЛицаЗаполнены = Ложь; 
	ФизическиеЛицаВСписке	= Истина;
	Организации 			= Новый СписокЗначений;
	ОрганизацииЗаполнены 	= Ложь;
	ОрганизацииВСписке		= Истина;
	Подразделения 			= Новый СписокЗначений;
	ПодразделенияЗаполнены 	= Ложь;
	ПодразделенияВСписке 	= Истина;
	
	Если ПараметрыЗапроса.ЕстьФильтрПоФизическимЛицам Тогда
		Если ТипЗнч(ПараметрыЗапроса.ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если НЕ ПараметрыЗапроса.ФизическиеЛица = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				ФизическиеЛица.Добавить(ПараметрыЗапроса.ФизическиеЛица);
				ФизическиеЛицаЗаполнены = Истина;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыЗапроса.ФизическиеЛица) = Тип("СписокЗначений") Тогда 
			ФизическиеЛица = ПараметрыЗапроса.ФизическиеЛица;
			ФизическиеЛицаЗаполнены = ПараметрыЗапроса.ФизическиеЛица.Количество() > 0;
		КонецЕсли;
		Если ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ФизическиеЛицаВСписке = Ложь
		Иначе
			ФизическиеЛицаВСписке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЕстьФильтрПоОрганизации Тогда
		Если ТипЗнч(ПараметрыЗапроса.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Если НЕ ПараметрыЗапроса.Организация = Справочники.Организации.ПустаяСсылка() Тогда
				Организации.Добавить(ПараметрыЗапроса.Организация);
				ОрганизацииЗаполнены = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыЗапроса.Организация) = Тип("СписокЗначений") Тогда
			Организации = ПараметрыЗапроса.Организация;
			ОрганизацииЗаполнены = ПараметрыЗапроса.Организация.Количество() > 0;;
		КонецЕсли;
		Если ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ОрганизацииВСписке = Ложь
		Иначе
			ОрганизацииВСписке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЕстьФильтрПоПодразделениям Тогда
		Если ТипЗнч(ПараметрыЗапроса.Подразделения) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если НЕ ПараметрыЗапроса.Подразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
				Подразделения.Добавить(ПараметрыЗапроса.Подразделения);
				ПодразделенияЗаполнены = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыЗапроса.Подразделения) = Тип("СписокЗначений") Тогда
			Подразделения = ПараметрыЗапроса.Подразделения;
			ПодразделенияЗаполнены = ПараметрыЗапроса.Подразделения.Количество() > 0;;
		КонецЕсли;
		Если ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ПодразделенияВСписке = Ложь
		Иначе
			ПодразделенияВСписке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковИнтервальный.Организация КАК Организация,
	|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение,
	|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
	|ГДЕ
	|	КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &НачалоПериода
	|	И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &КонецПериода
	|	И ВЫБОР
	|			КОГДА &ФизическиеЛицаЗаполнены = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ФизическиеЛицаВСписке = ИСТИНА
	|						ТОГДА КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В (&ФизическиеЛица)
	|					ИНАЧЕ НЕ КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В (&ФизическиеЛица)
	|				КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОрганизацииЗаполнены = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ОрганизацииВСписке = ИСТИНА
	|						ТОГДА КадроваяИсторияСотрудниковИнтервальный.Организация В (&Организации)
	|					ИНАЧЕ НЕ КадроваяИсторияСотрудниковИнтервальный.Организация В (&Организации)
	|				КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПодразделенияЗаполнены = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПодразделенияВСписке = ИСТИНА
	|						ТОГДА КадроваяИсторияСотрудниковИнтервальный.Подразделение В (&Подразделения)
	|					ИНАЧЕ НЕ КадроваяИсторияСотрудниковИнтервальный.Подразделение В (&Подразделения)
	|				КОНЕЦ
	|		КОНЕЦ
	|	И НЕ КадроваяИсторияСотрудниковИнтервальный.Сотрудник.ПометкаУдаления
	|    И КадроваяИсторияСотрудниковИнтервальный.ВидСобытия <> Значение(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ГоловнаяОрганизация)
	|ПО
	|	ФизическоеЛицо";
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ФизическиеЛица", ФизическиеЛица);
	ДопПараметры.Вставить("ФизическиеЛицаЗаполнены", ФизическиеЛицаЗаполнены);
	ДопПараметры.Вставить("ФизическиеЛицаВСписке", ФизическиеЛицаВСписке);
	ДопПараметры.Вставить("Организации", Организации);
	ДопПараметры.Вставить("ОрганизацииЗаполнены", ОрганизацииЗаполнены);
	ДопПараметры.Вставить("ОрганизацииВСписке", ОрганизацииВСписке);
	ДопПараметры.Вставить("Подразделения", Подразделения);
	ДопПараметры.Вставить("ПодразделенияЗаполнены", ПодразделенияЗаполнены);
	ДопПараметры.Вставить("ПодразделенияВСписке", ПодразделенияВСписке);
	
	Для Каждого ЗнчКлюч Из ДопПараметры Цикл
		Запрос.УстановитьПараметр(ЗнчКлюч.Ключ, ЗнчКлюч.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСотрудники = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Попытка
		ПараметрыВызова = Новый Массив;	
		УстановитьПривилегированныйРежим(Истина);
		КлючВарианта = ПараметрыЗапроса.КлючВарианта;
		ВариантОтчета = ВариантыОтчетов.ВариантОтчета(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет.АнализНачисленийИУдержаний"),
			КлючВарианта);
		
		РезультатЗапросаНачисления = ДанныеНачисленийПоСотрудникам(Запрос.Параметры);
		ТЗ_Начисления = РезультатЗапросаНачисления.Выгрузить();
		УстановитьПривилегированныйРежим(Истина);
		Пока ВыборкаСотрудники.Следующий() Цикл
			
			ОтборСтрок = Новый Структура();
			ОтборСтрок.Вставить("ФизическоеЛицо", ВыборкаСотрудники.ФизическоеЛицо);
			ОтборСтрок.Вставить("Организация", ВыборкаСотрудники.ГоловнаяОрганизация);
			ДанныеПоНачислениям = ТЗ_Начисления.НайтиСтроки(ОтборСтрок);
			Если ДанныеПоНачислениям.Количество() > 0 Тогда
				ДопПараметры.Вставить("КлючВарианта", КлючВарианта);
				КадровыйРасчетныйЛистокОбработкаРезультатаЗапроса(
					ВыборкаСотрудники,
					ПараметрыЗапроса,
					ПараметрыВызова,
					ВариантОтчета,
					ДопПараметры);
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ИнфоОбОшибке	= ИнформацияОбОшибке();
		СтруктураОшибки	= Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
		Saby_Core.ExtExceptionToJournal(СтруктураОшибки);
	КонецПопытки;	
	
	Возврат ПараметрыВызова;
КонецФункции
