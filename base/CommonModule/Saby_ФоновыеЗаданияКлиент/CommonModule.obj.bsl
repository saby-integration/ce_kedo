
#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

Процедура ОткрытьФормуДлительнойОперации(ФоновоеЗаданиеИмяМетода, ФоновоеЗаданиеПараметры, ФоновоеЗаданиеНаименование, Владелец, ОповещениеОЗакрытииФормы = Неопределено) Экспорт	
	Сообщение = Новый Структура("Показать, Пояснение, Текст, НавигационнаяСсылка", Истина, ФоновоеЗаданиеНаименование, "Выполняется...");
	
	ВладелецИдентификатор = Неопределено;
	Попытка
		ВладелецИдентификатор = Владелец.УникальныйИдентификатор;
	Исключение
		ВладелецИдентификатор = Неопределено;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДополнительногоРезультата");
	ПараметрыФормы.Вставить("АдресРезультата");
	ПараметрыФормы.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыФормы.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыФормы.Вставить("ВыводитьСообщения", Истина);
	ПараметрыФормы.Вставить("ИдентификаторЗадания", Новый УникальныйИдентификатор);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ВладелецИдентификатор);
	ПараметрыФормы.Вставить("Интервал", 1);
	ПараметрыФормы.Вставить("ОжидатьЗавершение", Ложь);
	ПараметрыФормы.Вставить("ОповещениеПользователя", Сообщение);
	ПараметрыФормы.Вставить("ПолучатьРезультат", Ложь);
	ПараметрыФормы.Вставить("ТекстСообщения", ФоновоеЗаданиеНаименование);
	ПараметрыФормы.Вставить("ФоновоеЗаданиеИмяМетода", ФоновоеЗаданиеИмяМетода);
	ПараметрыФормы.Вставить("ФоновоеЗаданиеПараметры", ФоновоеЗаданиеПараметры);
	ПараметрыФормы.Вставить("ФоновоеЗаданиеНаименование", ФоновоеЗаданиеНаименование);
	// TODO Необходимо Ввзомы метода и связаных функций разделить на корректные клиент/сервер области 05.07.24
	//ИмяФормыДлительнойОперации = ТипМетаданныхОбработки()+".SABY.Форма.ДлительнаяОперация";
	
	МодульФоновогоЗаданияКлиент().ЗапуститьФоновоеЗаданиеКлиент(ПараметрыФормы, Владелец);
КонецПроцедуры

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

Процедура ЗапуститьINIФоновымЗаданием(ini_name, ПараметрыВызоваИни, context_params = Неопределено, ФормаВладелец = Неопределено, ЗаголовокФормы="") Экспорт
	ОповещениеОЗакрытииФормыФоновогоЗадания = get_prop(context_params, "ОповещениеОЗакрытииФормыФоновогоЗадания");
	Если ТипЗнч(ОповещениеОЗакрытииФормыФоновогоЗадания) = Тип("ОписаниеОповещения") Тогда
		context_params.Удалить("ОповещениеОЗакрытииФормыФоновогоЗадания");
	Иначе
		ОповещениеОЗакрытииФормыФоновогоЗадания = Неопределено;
	КонецЕсли;	
	
	ПараметрыВызова = МодульФоновогоЗаданияСервер().ПодготовитьПараметрыЗапускINIФоновымЗаданием(ini_name, ПараметрыВызоваИни, context_params);
	
	context_params = ПараметрыВызова["params"];	 

	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыДлительныеОперации = Новый Структура;
	ПараметрыДлительныеОперации.Вставить("ИмяОбработки",		"SABY");
	ПараметрыДлительныеОперации.Вставить("ИмяМетода",			"API_BLOCKLY_RUN_BACKGROUND");
	ПараметрыДлительныеОперации.Вставить("ПараметрыВыполнения",	ПараметрыВызова);
	ПараметрыДлительныеОперации.Вставить("ЭтоВнешняяОбработка",	ЛОЖЬ);

	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ПараметрыДлительныеОперации);
	ПараметрыЗадания.Добавить("");   
	
	ОткрытьФормуДлительнойОперации(ВыполняемыйМетод, ПараметрыЗадания, ЗаголовокФормы, ФормаВладелец,ОповещениеОЗакрытииФормыФоновогоЗадания); 
 
КонецПроцедуры 

Процедура ЗагрузитьСопоставленияПоУмолчаниюФоновымЗаданием(connection_info) Экспорт
	ПараметрыВызова = Новый Соответствие;
	
	ПараметрыВызова.Вставить("connection_info", connection_info);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ПараметрыВызова);
	МодульФоновогоЗаданияКлиент().ОткрытьФормуДлительнойОперации("Saby_ФоновыеЗаданияСервер.API_BLOCKLY_PREDEFINE_BACKGROUND",ПараметрыЗадания, "", Неопределено, Неопределено);	
КонецПроцедуры	

#Область include_core_base_ФоновыеЗадания_Клиент
#КонецОбласти

#Область include_base_CommonModule_ИмяМодуляCore
#КонецОбласти

#Область Подключаемый_ПроверитьВыполнениеЗадания

&НаКлиенте
Функция ПрогрессСтрокой(Прогресс)
	
	Результат = "";
	Если Прогресс = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Процент = 0;
	Если Прогресс.Свойство("Процент", Процент) Тогда
		Результат = Строка(Процент) + "%";
	КонецЕсли;
	Текст = 0;
	Если Прогресс.Свойство("Текст", Текст) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + " (" + Текст + ")";
		Иначе
			Результат = Текст;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВозвращатьРезультатВОбработкуВыбора()
	Возврат Ложь;
	//Возврат ОписаниеОповещенияОЗакрытии = Неопределено
	//	И Параметры.ПолучатьРезультат
	//	И ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения");
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания(ФормаЗакрывается = Ложь) Экспорт
	
	ПараметрыСеансаРасширения = МодульФоновогоЗаданияСервер().ПрогрессФЗПрочитатьЗначения();
	_Параметры				= ПараметрыСеансаРасширения.Параметры;
	ДополнительныеПараметры	= ПараметрыСеансаРасширения.ДополнительныеПараметры;
	ИнтервалОжидания		= ПараметрыСеансаРасширения.ИнтервалОжидания;
	КартинкаОповещения		= ПараметрыСеансаРасширения.КартинкаОповещения;
	ТекстОповещения			= ПараметрыСеансаРасширения.ТекстОповещения;
	
	Задание = МодульФоновогоЗаданияСервер().ПроверитьЗаданиеВыполнено(ФормаЗакрывается);
	Статус = Задание.Статус;
	МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьСтатус(Статус);
	
	ДополнительныеПараметры_ = get_prop(Задание.Прогресс, "ДополнительныеПараметры");
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	
	Если Задание.Прогресс <> Неопределено Тогда
		Если ТипЗнч(ДополнительныеПараметры_) = Тип("Структура") Тогда
			Для Каждого ЗнчКлюч Из ДополнительныеПараметры_ Цикл
				ДополнительныеПараметры.Вставить(ЗнчКлюч.Ключ, ЗнчКлюч.Значение);
			КонецЦикла;
		КонецЕсли;
		ПрогрессСтрокой = ПрогрессСтрокой(Задание.Прогресс);
		Если Не ПустаяСтрока(ПрогрессСтрокой) Тогда
			//Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстСообщения + Символы.ПС + ПрогрессСтрокой;
			ТекстОповещения = Задание.Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьДополнительныеПараметры(ДополнительныеПараметры);
	
	//// Формы нет
	//Если Задание.Сообщения <> Неопределено И ВладелецФормы <> Неопределено Тогда
	//	ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор;
	//	Для каждого СообщениеПользователю Из Задание.Сообщения Цикл
	//		СообщениеПользователю.ИдентификаторНазначения = ИдентификаторНазначения;
	//		СообщениеПользователю.Сообщить();
	//	КонецЦикла;
	//	Задание.Сообщения = Новый ФиксированныйМассив(Новый Массив);
	//КонецЕсли;
	
	Если Статус = "Выполнено" Тогда
		СтатусВыполнения = get_prop(ДополнительныеПараметры, "status");
		СообщитьПрогрессОперации(,,Новый Структура("Прогресс", 100));
		
		Если СтатусВыполнения = "run" Тогда
			// Выполняем команду через оповещение
			Контекст = Новый Структура;
			Контекст.Вставить("step", ДополнительныеПараметры.step);
			
			ВыполнитьКоманды_Клиент(
				Новый ОписаниеОповещения("Подключаемый_ПроверитьВыполнениеЗаданияПослеВыполненияКоманды", ЭтотОбъект, Контекст),
				ДополнительныеПараметры.commands,
				ДополнительныеПараметры.commands_data);
				
			Возврат;

		ИначеЕсли СтатусВыполнения = "error" Тогда
			//TODO отвратительно
			РезультатВыгрузки = ДополнительныеПараметры.data;
			КартинкаОповещения = "Ошибка32";

			Если ТипЗнч(РезультатВыгрузки.detail) = Тип("Строка") Тогда
				ТекстОповещения = СокрЛП(РезультатВыгрузки.message) + ". " +  СокрЛП(РезультатВыгрузки.detail);
			Иначе	
				ТекстОповещения = СокрЛП(РезультатВыгрузки.message) + ". ";
			КонецЕсли;
			// 
			МодульCore().ExtExceptionToJournal(РезультатВыгрузки);
		ИначеЕсли СтатусВыполнения = "complete" Тогда
			Если Не ЗначениеЗаполнено(ТекстОповещения) Тогда
				ТекстОповещения = "Выполнено";
			КонецЕсли;
			
			ДопПараметрыДата = get_prop(ДополнительныеПараметры, "data");
			КартинкаИмя = get_prop(ДопПараметрыДата, "Картинка");
			Если Не ПустаяСтрока(КартинкаИмя) Тогда
				КартинкаОповещения = КартинкаИмя;
			Иначе
				КартинкаОповещения = "ЗеленаяГалка";
			КонецЕсли;
			КоличествоОбработано	= get_prop(ДопПараметрыДата, "CountConfirmed", 0);
			ВсегоОбъектов			= get_prop(ДопПараметрыДата, "CountObjects", 0);
			КоличествоОшибок		= get_prop(ДопПараметрыДата, "CountErrors", 0);
			Если	КоличествоОшибок > 0
					ИЛИ КоличествоОшибок + КоличествоОбработано <> ВсегоОбъектов Тогда
				СтатусВыполнения = "error";
				КартинкаОповещения = ЛокализацияНазваниеПродукта()+"_Ошибка32";
			КонецЕсли;
			
		КонецЕсли;
		
		МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьКартинкуОповещения(КартинкаОповещения);
		//Сообщений об ошибке может быть несколько
		СообщенияДата = get_prop(ДополнительныеПараметры, "data");
		мСообщений = Неопределено;
		Если ТипЗнч(СообщенияДата) = Тип("Структура") или ТипЗнч(СообщенияДата) = Тип("Соответствие") Тогда
			мСообщений = get_prop(СообщенияДата, "detail");
		КонецЕсли;
		Если ТипЗнч(мСообщений) = Тип("Массив") Тогда
			ТекстОповещения_ = ТекстОповещения;
			Для Каждого ДанныеСообщения Из мСообщений Цикл
				ТекстОповещения		= get_prop(ДанныеСообщения, "message") +" "+ get_prop(ДанныеСообщения, "detail");
				ПоказатьОповещение();
			КонецЦикла;
			ТекстОповещения = ТекстОповещения_;
			ДополнительныеПараметры.data.Вставить("detail", "");
			МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьДополнительныеПараметры(ДополнительныеПараметры);
		КонецЕсли;
		МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьТекстОповещения(ТекстОповещения);
		//Итоговое
		ПоказатьОповещение();

		Если ВозвращатьРезультатВОбработкуВыбора() Тогда
			//ОповеститьОВыборе(Задание.Результат);
			Возврат;
		КонецЕсли;
		//Закрыть(РезультатВыполнения(Задание));
		Возврат;
		
	ИначеЕсли Статус = "Ошибка" Тогда
		
		// Как передавать параметр обратно???
		//Закрыть(РезультатВыполнения(Задание));
		Если ВозвращатьРезультатВОбработкуВыбора() Тогда
			ВызватьИсключение Задание.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьТекстОповещения(ТекстОповещения);
	Если _Параметры.ВыводитьОкноОжидания Тогда
		Если _Параметры.Интервал = 0 Тогда
			ИнтервалОжидания = ИнтервалОжидания * 1.4;
			Если ИнтервалОжидания > 15 Тогда
				ИнтервалОжидания = 15;
			КонецЕсли;
			МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьИнтервалОжидания(ИнтервалОжидания);
		КонецЕсли;
		ПодключитьОбработчикОжидания("РасширениеКЭДОПроверитьСостояниеФоновогоЗаданияКлиент", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПослеВыполненияКоманды(commands_result, Контекст) Экспорт
	
	Параметры = МодульФоновогоЗаданияСервер().ПрогрессФЗПрочитатьЗначения().Параметры;
	
	Параметры.ФоновоеЗаданиеПараметры[0].ПараметрыВыполнения["commands_result"] = commands_result;
	Параметры.ФоновоеЗаданиеПараметры[0].ПараметрыВыполнения.Вставить("current_block", Контекст.step);
	МодульФоновогоЗаданияСервер().ПрогрессФЗУстановитьПараметры(Параметры);
	
	МодульФоновогоЗаданияСервер().ПерезапуститьФоновоеЗадание();
	Если Параметры.ВыводитьОкноОжидания Тогда
		ИнтервалОжидания = Параметры.Интервал;
		Если Параметры.Интервал = 0 Тогда
			ИнтервалОжидания = ИнтервалОжидания * 1.4;
			Если ИнтервалОжидания > 15 Тогда
				ИнтервалОжидания = 15;
			КонецЕсли;
		КонецЕсли;
		ПодключитьОбработчикОжидания("РасширениеКЭДОПроверитьСостояниеФоновогоЗаданияКлиент", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОповещение()
	
	ПараметрыСеансаРасширения = МодульФоновогоЗаданияСервер().ПрогрессФЗПрочитатьЗначения();
	_Параметры	= ПараметрыСеансаРасширения.Параметры;
	
	Если _Параметры.ОповещениеПользователя = Неопределено Или Не _Параметры.ОповещениеПользователя.Показать Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = _Параметры.ОповещениеПользователя;
	
	НавигационнаяСсылкаОповещения = Оповещение.НавигационнаяСсылка;
	ВладелецФормы = Неопределено; // В контексте формы, в модуле отсутствует
	Если НавигационнаяСсылкаОповещения = Неопределено И ВладелецФормы <> Неопределено И ВладелецФормы.Окно <> Неопределено Тогда
		НавигационнаяСсылкаОповещения = ВладелецФормы.Окно.ПолучитьНавигационнуюСсылку();
	КонецЕсли;
	ПояснениеОповещения = Оповещение.Пояснение;
	Если ПояснениеОповещения = Неопределено И ВладелецФормы <> Неопределено И ВладелецФормы.Окно <> Неопределено Тогда
		ПояснениеОповещения = ВладелецФормы.Окно.Заголовок;
	КонецЕсли;
	
	Если 	_Параметры.ФоновоеЗаданиеНаименование = "Отправка в "+ЛокализацияНазваниеПродукта() //команда - "Отправка в СБИС"
				или 
			_Параметры.ФоновоеЗаданиеНаименование = "Выгрузка в 1С"  //Действие -"Выгрузка в 1С" с формы задач
				Тогда
		ПараметрыЗагрузки = get_prop(_Параметры.ФоновоеЗаданиеПараметры[0],"ПараметрыВыполнения",Неопределено);
		НавигационнаяСсылкаОповещения = ПолучитьАдресСтраницыОтчетОЗагрузке(ПараметрыЗагрузки["params"]["api_url"],ПараметрыЗагрузки["operation_uuid"]);


	КонецЕсли;
	Оповестить("Saby_ЗавершениеДлительнойОперации");
	ПоказатьОповещениеПользователя(ПояснениеОповещения,НавигационнаяСсылкаОповещения, 
		?(НЕ ПустаяСтрока(ПараметрыСеансаРасширения.ТекстОповещения),ПараметрыСеансаРасширения.ТекстОповещения, ?(Оповещение.Текст <> Неопределено, Оповещение.Текст, НСтр("ru = 'Действие выполнено'")))
		,БиблиотекаКартинок[ПараметрыСеансаРасширения.КартинкаОповещения]
		,СтатусОповещенияПользователя.Важное,);

КонецПроцедуры


&НаКлиенте
Функция ПолучитьАдресСтраницыОтчетОЗагрузке(URL, extSyncDocId) 
	Возврат URL+"/ext-sync-doc/page/?extSyncDocId="+extSyncDocId; 	 	
КонецФункции	


#КонецОбласти

#Область include_core_base_ДлительныеОперации
#КонецОбласти

#Область include_BlocklyExecutor_base_Commands
#КонецОбласти

#Область include_core_base_Криптография_НаКлиенте1С_МодульФункции
#КонецОбласти

#Область include_core_base_Криптография_НаКлиенте1С
#КонецОбласти

