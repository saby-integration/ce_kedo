
#Область ОбщиеИСервисныеМетоды

//**** МЕТАДАННЫЕ *****
Функция ЭтотОбъектМетаданныхЗахвачен(Контекст) Экспорт
	//Присутствует хоть один из обрабатываемых типов
	МассивДоступныхТипов = Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.Типы();

	Для Каждого ТипИсточника Из Контекст.ТипыИсточников Цикл
		НайденПоддерживаемыйДокументОбмена = Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.СодержитТип(ТипИсточника);
		Если НЕ НайденПоддерживаемыйДокументОбмена Тогда
			Продолжить;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных) 
	ТипСсылки = Неопределено;
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("ДокументСсылка."+ОбъектМетаданных.Имя);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("СправочникСсылка."+ОбъектМетаданных.Имя);
	КонецЕсли;
	Возврат ТипСсылки;
КонецФункции // ПолучитьТипСсылкиПоМетаданным()

Функция ОпределитьТипМетаданныхИсточника(Контекст) Экспорт
	ТипОбъекта	= Неопределено;
	//Определяем по первому элементу. т.к. смешанных списков быть не должно то и
	//документы не могут быть по определению в одном списке со справочниками
	Для Каждого ТипИсточника Из Контекст.ТипыИсточников Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИсточника); 
		ТипОбъекта	= ?(Метаданные.Справочники.Содержит(ОбъектМетаданных), "Справочник", ТипОбъекта);
		ТипОбъекта	= ?(ТипОбъекта = Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных), "Документ", ТипОбъекта);
		Прервать;
	КонецЦикла;	
	Возврат ТипОбъекта;
КонецФункции

#Область include_base_ОбъектыФормыИзПодсистемыКадры
#КонецОбласти


Функция ПринадлежитОбъектМетаданныхПодсистеме(ТипОбъекта, Подсистема)
	Возврат Подсистема.Состав.Содержит( Метаданные.НайтиПоТипу(ТипОбъекта) );
КонецФункции


//**** ФОРМА *****

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодготовитьСтруктуруОписанияФормы(Форма) Экспорт
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("ИмяФормы",			Форма.ИмяФормы);
	ОписаниеФормы.Вставить("ТипыИсточников",	Новый Массив);
	ОписаниеФормы.Вставить("Форма",				Форма);

	ТипОбъекта			= ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы));
	ОбъектМетаданных	= Метаданные.НайтиПоТипу(ТипОбъекта);
	ЭтоЖурналДокументов	= ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
	
	Если ЭтоЖурналДокументов Тогда
		Попытка
			ТипыОбъектовОповещения = Форма.ТипыОбъектовОповещения;
		Исключение
			ТипыОбъектовОповещения = Новый Массив;
		КонецПопытки;
		Для каждого ТипМетаданных Из ТипыОбъектовОповещения Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипМетаданных.Значение);
            Если ОбъектМетаданных <> Неопределено Тогда
				ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
				Если ТипСсылки <> Неопределено Тогда
					ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
		Если ТипСсылки <> Неопределено Тогда
			ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеФормы;
КонецФункции // ПодготовитьСтруктуруОписанияФормы()

//Ищем в элементах формы таблицу значений с типом данных Динамический список
Функция ПолучитьНаименованиеРеквизитаСписка(Форма) Экспорт
	КоличествоДинамическийхСписков = 0;
	ИмяЭлементаСписка = "";
	ИменаСписков = Новый Массив;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			Если НЕ ЭлементФормы.Видимость ИЛИ Найти(ЭлементФормы.ПутьКДанным, ".") > 0 Тогда Продолжить; КонецЕсли;
			Если ТипЗнч(Форма.ЭтотОбъект[ЭлементФормы.ПутьКДанным]) = Тип("ДинамическийСписок") Тогда
				ИменаСписков.Добавить(ЭлементФормы.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Мы договорились, что колонки добавляются только на форму с одним динамическим списком
	Если ИменаСписков.Количество() > 0 Тогда
		ИмяЭлементаСписка = ИменаСписков[0];
		Если ИменаСписков.Количество() > 1 Тогда
			//Ести видимых динамических списков на форме несколько 
			//отдадим предпочтение первому у кого в названии встречается слово - "Список"
			Для каждого ИмяСписка Из ИменаСписков Цикл
				Если Найти(ИмяСписка, "Список") > 0 Тогда
					ИмяЭлементаСписка = ИмяСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяЭлементаСписка;
КонецФункции // ПолучитьНаименованиеРеквизитаСписка()

Функция ЭтоФормаИсключения(Форма) Экспорт
	ФормыИсключения = Новый Массив();
 	ФормыИсключения.Добавить("ОбщаяФорма.ОсновнаяФормаРабочегоСтола");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаСписка");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаВыбора");
 	ФормыИсключения.Добавить("ЖурналДокументов.Взаимодействия.Форма.ФормаСписка"); //ERP на главном экране
	Результат = ФормыИсключения.Найти(Форма.ИмяФормы) <> Неопределено;
	Возврат Результат;
КонецФункции

Функция ЭтоФормаСписка(Форма) Экспорт
	Результат = Найти(Форма.ИмяФормы, ".ФормаСписка") > 0;
	Возврат Результат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьСтруктуруДопТаблицы()
	СтруктураДопТаблицы = Новый Структура;
	СтруктураДопТаблицы.Вставить("ВременнаяТаблица", 	"");
	СтруктураДопТаблицы.Вставить("ТаблицаДанных");
	СтруктураДопТаблицы.Вставить("Псевдоним");
	СтруктураДопТаблицы.Вставить("СтруктураКолонок");
	СтруктураДопТаблицы.Вставить("ПостфиксКолонок",		"SABY_Колонки_");
	СтруктураДопТаблицы.Вставить("ПоляСоединения",		Новый Структура());
	СтруктураДопТаблицы.Вставить("ИмяСпискаНаФорме",	"Список");
	
	Возврат СтруктураДопТаблицы;
КонецФункции

#КонецОбласти

#Область КомандыСБИС

//*************************************
//Группа комманд СБИС

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ДобавитьКомандыСБИС(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт

	ПолучитьСписокКомандSaby(НастройкиФормы["ТипыИсточников"], Команды);
	
	КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, СразуНаПринтер, ФорматСохранения,
	|ПереопределитьПользовательскиеНастройкиКоличества, ДополнитьКомплектВнешнимиПечатнымиФормами,
	|ФиксированныйКомплект, ДополнительныеПараметры";
	
КонецПроцедуры

Процедура ПолучитьСписокКомандSaby( Источники, Команды ) Экспорт 

	ЕстьКомандыДляСправочников = Ложь;
	ЕстьКомандыДляДокументов   = Ложь;
	ВставитьКнопкуСБИС         = Ложь;
	
	Для Каждого ТипЗначения Из Источники Цикл
		
		ОбъектМетаданных			= Метаданные.НайтиПоТипу(ТипЗначения);
		ЕстьКомандыДляСправочников	= ЕстьКомандыДляСправочников ИЛИ Метаданные.Справочники.Содержит(ОбъектМетаданных);
		ЕстьКомандыДляДокументов	= ЕстьКомандыДляДокументов ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных);
		Если ЕстьКомандыДляСправочников или ЕстьКомандыДляДокументов Тогда
			ВставитьКнопкуСБИС = Истина;	
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТиповДокументов = Новый Массив();
	Для Каждого ТипДок Из Метаданные.Документы Цикл
		МассивТиповДокументов.Добавить(ТипДок);
	КонецЦикла;
	
	Если ВставитьКнопкуСБИС Тогда
		
		Порядок = 1;			
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       "Saby_ЗагрузкаПечатныхФормДокументов");
		НоваяКоманда.Вставить("Заголовок", "Загрузить в SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ЗагрузитьВСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
			
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);

		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       "Saby_ОткрытьВСБИС");
		НоваяКоманда.Вставить("Заголовок", "Открыть в SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОткрытьВСБИСПолучитьUID");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);

		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		
		
		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       "Saby_ВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Заголовок", "Выгрузить вложения из SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
		
		Если ЕстьКомандыДляДокументов Тогда
		
			
			Порядок = Порядок + 1;
			НоваяКоманда = Новый Структура;			
			НоваяКоманда.Вставить("Имя",       "Saby_ОбновитьСтатусы");
			НоваяКоманда.Вставить("Заголовок", "Обновить статусы"); 
			НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОбновитьСтатусы");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
					
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
			
		КонецЕсли;	
		
		Порядок = Порядок + 1;		
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       "Saby_Задачи");
		НоваяКоманда.Вставить("Заголовок", "Задачи"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииЗадачи");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ДобавитьКомандуНаФорму1С(КомандаSaby, Команды, МассивТиповДокументов, Порядок)
	
	ПодключаемаяКоманда = Команды.Добавить();
	ПодключаемаяКоманда.Вид                      = "SABY_КОМАНДЫ"; //ВидПодключаемойКоманды();
	ПодключаемаяКоманда.Представление            = КомандаSaby.Заголовок;
	//ПодключаемаяКоманда.Важность               = КомандаSaby.Важность;
	ПодключаемаяКоманда.Порядок                  = Порядок;
	ПодключаемаяКоманда.ТолькоВоВсехДействиях    = Ложь;
	ПодключаемаяКоманда.ТипПараметра             = Новый ОписаниеТипов(МассивТиповДокументов);
	ПодключаемаяКоманда.Назначение               = "SABY";
	ПодключаемаяКоманда.ФункциональныеОпции      = "";
	ПодключаемаяКоманда.УсловияВидимости         = Новый Массив(); //ОбщегоНазначения.СкопироватьРекурсивно(КомандаSaby.УсловияВидимости);
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.МножественныйВыбор       = Истина;
	ПодключаемаяКоманда.РежимЗаписи              = "НеЗаписывать";
	ПодключаемаяКоманда.ТребуетсяРаботаСФайлами  = Ложь;
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.Менеджер                 = "";
	ПодключаемаяКоманда.ИмяФормы                 = "";
	ПодключаемаяКоманда.ИмяПараметраФормы        = "";
	ПодключаемаяКоманда.ПараметрыФормы           = Новый Структура("ИмяИни", КомандаSaby.ИмяИни);

	ПодключаемаяКоманда.Обработчик               = КомандаSaby.Действие;
	ПодключаемаяКоманда.ДополнительныеПараметры  = Новый Структура();
	
КонецПроцедуры	

Функция ПроисходилЛиОбменДокументовСоСБИС( МассивСсылокНаДокументы, ДопПараметры=Неопределено) Экспорт 
	
	РезультатЗапроса = РегистрыСведений.Saby_Состояние.ОтобратьПоСпискуОбъектов(МассивСсылокНаДокументы);
	Результат	= Новый Структура("БылОбмен,ОбменаНебыло",Новый Массив, Новый Массив );
	
	Для Каждого СтрокаЗПР Из РезультатЗапроса Цикл
		
		Если СтрокаЗПР.Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ЗаписьОбъекта = Новый Структура("Ссылка,UID,ТипМетаданных,ТипОбъекта,ИмяИни");
		ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, СтрокаЗПР);
		ЗаписьОбъекта.Ссылка = СтрокаЗПР.Объект; 
		
		Если ЗначениеЗаполнено(ДопПараметры) Тогда
			ЗаписьОбъекта.ИмяИни = ДопПараметры.ИмяИни;
		КонецЕсли;
		
		Если СтрокаЗПР.ОбменСоСбис Тогда
			Результат.БылОбмен.Добавить(ЗаписьОбъекта);
		Иначе
			Результат.ОбменаНебыло.Добавить(ЗаписьОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

Функция ПрочитатьСписокИнишекПоТипуИС(ТипИС, Действие = Неопределено) Экспорт 
	
	// Метод на вход будет получать ИмяИС и искать все инишки согласно блоку WORKSPACE META.
	// в нем будет передаваться title с красивым названием и в дальнейшем это название будет пришиваться к кнопке
	// например "Загрузить в СБИС", "Загрузить в СБИС как сотрудник 
	
	Результат = Новый Массив;
	Если ТипИС = "Сотрудники" Тогда
		ТранспортБлокли = Обработки.SABY.Создать();
		
		context_params = ТранспортБлокли.НастройкиПодключенияПрочитать();
		мИниФайлов	= Новый Массив();
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_Сотрудники_read")); 
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_ПрочийКадровыйДокументСотрудники_read"));
		
		params	= Новый Структура("props, ini",Новый Структура("id, type_data", context_params.ConnectionId, 1),мИниФайлов,);
		res = ТранспортБлокли.local_helper_integration_api(context_params, "IntegrationConnection.ReadConnection", params);
		
		Для Каждого _ини Из res["data"] Цикл
			title = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			ini_name = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			Результат.Добавить(Новый Структура("title,ini_name,xml",title,ini_name,_ини.Значение["data"] ));
		КонецЦикла;	 
		
	Иначе
		Результат.Добавить(Новый Структура); // здесь будут инишки в случае документов. Сейчас такого нет.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция СформироватьУРЛСТикетом(УрлРесурса, Тикет)
	
	ПосОРГ3 = СтрНайти(УрлРесурса, "&org=3");
	Если ПосОРГ3 > 0 Тогда
		УрлРесурса	= Сред(УрлРесурса, 1, ПосОРГ3 - 1);
	КонецЕсли;				
	
	УрлРесурса = УрлРесурса + ?(ЗначениеЗаполнено(Тикет), "&ticket=" + Тикет, "");
	
	Возврат УрлРесурса;
	
КонецФункции

Функция ПолучитьТикет(context_params = Неопределено ) Экспорт
	
	Если context_params = Неопределено Тогда
		context_params = Saby_Core.НастройкиПодключенияПрочитать();
	КонецЕсли;
	
	ТокенSID	= Новый Структура("sid", context_params.session );
	ОбработкаСБИС = Обработки.SABY.Создать();
	Тикет_ = ОбработкаСБИС.local_helper_api(context_params, "САП.GetTicketForCurrentSid", ТокенSID );
	Тикет	= "";
	
	Если ТипЗнч(Тикет_) = Тип("Строка") Тогда
		Тикет	= Тикет_;
	КонецЕсли;
	
	Возврат Тикет; 
	
КонецФункции

Функция ПолучитьССылкиНаДокументыВСБИС(МассивИсточникДанных, ПолучитьТикет = Ложь ) Экспорт
	
	Результат = Новый Структура("ОбработаноУспешно, ОбработаноСОшибкой", Новый Массив(), Новый Массив());
	context_params= Saby_Core.НастройкиПодключенияПрочитать();
	
	Обработка	= Обработки.SABY.Создать();
	НоваяЗапись = Новый Структура("Ссылка, UID, Сообщение",,,"Ошибка получения URL");
 	//Пока, что дергаем каждый документ в отдельности
	Для Каждого ДокументИсточник Из МассивИсточникДанных Цикл
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДокументИсточник, "Ссылка, UID");
			
		Попытка
			Обработка.local_helper_write_stat(context_params, "Переход в СБИС", ДокументИсточник.Ссылка.Метаданные().Имя, 1);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
		КонецПопытки;
		
		Попытка
			result = Обработка.local_helper_read_document(context_params, Новый Структура("Идентификатор",ДокументИсточник.UID));
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
			Детали              =  Saby_Core.get_prop(СтруктураОшибки,	"detail", Неопределено);
			ДеталиОшибка		=  Saby_Core.get_prop(Детали, 			"error", Неопределено);
			ДеталиОшибкаДетали	=  Saby_Core.get_prop(ДеталиОшибка,		"details", "");
			Если СтруктураОшибки.type = "NotFound" Тогда
				НоваяЗапись.Сообщение	= result["error"]["details"];
				Результат.ОбработаноСОшибкой.Добавить(НоваяЗапись);
				
			ИначеЕсли СтрНайти(СтруктураОшибки.message + ДеталиОшибкаДетали, "Не найден документ с идентификатором") > 0 Тогда
				//Из задач и из журнала описание ошибки приходит из разных полей структуры
				ДокументаUID	= СтрЗаменить(ДеталиОшибкаДетали,"Не найден документ с идентификатором","");
				ДокументаUID	= СокрЛП(СтрЗаменить(ДокументаUID,"'",""));
				РегистрыСведений.Saby_Состояние.УдалитьПоUID(ДокументаUID);
				НоваяЗапись.Сообщение	= "Документ был удалён в SABY";
				Результат.ОбработаноСОшибкой.Добавить(НоваяЗапись);
			Иначе
				ВызватьИсключение Saby_Core.NewExtExceptionСтрока(ИнфоОбОшибке);
			КонецЕсли;
		КонецПопытки; 
		
		Если result <> Неопределено И ТипЗнч(result["СсылкаДляНашаОрганизация"]) = Тип("Строка") Тогда
			Тикет = "";
			Если ПолучитьТикет = Истина Тогда
	 			Тикет = Обработка.ПолучитьТикетТекущейСессии(context_params);
			КонецЕсли;
			АдресHTML = СформироватьУРЛСТикетом(result["СсылкаДляНашаОрганизация"], Тикет);
			НоваяЗапись.Вставить("Заголовок",СокрЛП(ДокументИсточник.Ссылка));
			НоваяЗапись.Вставить("АдресСтраницы",АдресHTML);
			Результат.ОбработаноУспешно.Добавить(НоваяЗапись);
		Иначе
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьAPI3СсылкуИзСсылкиНаОбъект(СсылкаНаОбъект, API3Объект = Неопределено)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(API3Объект) Тогда
		API3Объект = Новый Структура("ИдИС, ИмяИС, _Представление");
	КонецЕсли; 
	
	ТипЗначения = ТипЗнч(СсылкаНаОбъект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения); 
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Справочники";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Документы";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Перечисления";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект);
		КонецЕсли;  
		
		API3Объект["ИмяИС"] = ТипМетаданных + "."  + ОбъектМетаданных.Имя;
		API3Объект["_Представление"] = СокрЛП(СсылкаНаОбъект); 
		
	КонецЕсли;  
	
	Возврат API3Объект;
	
КонецФункции

Функция ПолучитьДейсвияДляОбъекта(СсылкаНаОбъект, context_params) Экспорт
	
	МОбъектов = Новый Массив();
	МОбъектов.Добавить(СсылкаНаОбъект);
	РезультатПоиска = РегистрыСведений.Saby_Состояние.ОтобратьПоСпискуОбъектов(МОбъектов);
	
	Результат		= Неопределено;
	ТранспортБлокли = Обработки.SABY.Создать();
	Для Каждого СтрокаРезультат Из РезультатПоиска Цикл
		
		Попытка
			Если Не ЗначениеЗаполнено(СтрокаРезультат.UID) Тогда
				Продолжить;
			КонецЕсли;	
			result 			= ТранспортБлокли.local_helper_read_document(context_params, Новый Структура("Идентификатор",СтрокаРезультат.UID));
			РезультатЭтап	= Saby_Core.get_prop(result, "Этап");
			Если ТипЗнч(РезультатЭтап) = Тип("Массив") И РезультатЭтап.Количество() > 0 Тогда
				Результат	= Saby_Core.get_prop(РезультатЭтап[0], "Действие", Новый Массив);
			КонецЕсли; 
			
		Исключение 
			
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
			Если СтруктураОшибки.type = "Unauthorized" Тогда
 				ВызватьИсключение Saby_Core.NewExtExceptionСтрока(ИнфоОбОшибке);
			КонецЕсли;
			СтруктураОшибкиДетали 		= Saby_Core.get_prop(СтруктураОшибки, "detail");
			СтруктураОшибкиСообщение	= Saby_Core.get_prop(СтруктураОшибки, "message");
			Результат	= Новый Структура("status, detail, message", "error",СтруктураОшибкиДетали, СтруктураОшибкиСообщение);
			
			Если ТипЗнч(СтруктураОшибкиДетали) = Тип("Структура") Или ТипЗнч(СтруктураОшибкиДетали) = Тип("Соответствие") Тогда
				СтруктураОшибкиДеталиОшибка = Saby_Core.get_prop(СтруктураОшибкиДетали, "error");
				Если СтрНайти(Saby_Core.get_prop(СтруктураОшибкиДеталиОшибка, "details"),  "Не найден документ с идентификатором") > 0 Тогда
					Результат	= Новый Структура("ПереотправитьОбъект",Истина);
					РегистрыСведений.Saby_Состояние.Удалить(СсылкаНаОбъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Процедура ДобавитьКнопкуСБИСВСправочники() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуСБИСВДокументы() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуСБИСВЖурналДокументов() Экспорт
	
КонецПроцедуры

Функция ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыЗапроса) Экспорт

	ПараметрыВызова = Новый Массив;	
	Запрос = Новый Запрос;
	ТекстЗапроса ="ВЫБРАТЬ 	0 КАК Цифра ПОМЕСТИТЬ ВТЦифры  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	1  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	2  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	3  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	4  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	5  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	6  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	7  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	8  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	9 ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), МЕСЯЦ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), МЕСЯЦ) КАК Период ПОМЕСТИТЬ ПредставленияПериоды ИЗ 	ВТЦифры КАК Цифры 		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10 		ПО (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ) > 9) 		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100 		ПО (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ) > 99) 		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000 		ПО (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ) > 999) 		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000 		ПО (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ) > 9999) 		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000 		ПО (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ) > 99999) ГДЕ 	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), МЕСЯЦ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), МЕСЯЦ) МЕЖДУ &НачалоПериода И &КонецПериода ;  //////////////////////////////////////////////////////////////////////////////// УНИЧТОЖИТЬ ВТЦифры ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник, 	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо, 	ВзаиморасчетыССотрудниками.Организация КАК Организация, 	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение, 	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовНачальныйОстаток КАК НачальныйОстаток, 	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовКонечныйОстаток КАК КонечныйОстаток, 	ВзаиморасчетыССотрудниками.Период КАК Период ПОМЕСТИТЬ ВТОстаткиИОборотыВзаиморасчетовССотрудниками ИЗ 	РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты( 			НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ), 			КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ), 			Месяц, 			, 			ВЫБОР 					КОГДА &ЕстьФильтрПоОрганизации 						ТОГДА Организация = &Организация 					ИНАЧЕ ИСТИНА 				КОНЕЦ 				И ВЫБОР 					КОГДА &ЕстьФильтрПоСотрудникам 						ТОГДА ФизическоеЛицо В (&ФизическиеЛица) 					ИНАЧЕ ИСТИНА 				КОНЕЦ) КАК ВзаиморасчетыССотрудниками  ИНДЕКСИРОВАТЬ ПО 	Сотрудник ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ) КАК МесяцНачисления, 	НачисленияИУдержания.Период КАК Период, 	НачисленияИУдержания.ФизическоеЛицо КАК ФизическоеЛицо, 	НачисленияИУдержания.Подразделение КАК Подразделение, 	НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты КАК Группа, 	НачисленияИУдержания.НачислениеУдержание КАК ВидРасчета, 	СУММА(НачисленияИУдержания.Сумма) КАК Сумма, 	НачисленияИУдержания.Организация КАК Организация, 	НачисленияИУдержания.Сотрудник КАК Сотрудник, 	НачисленияИУдержания.ДатаНачала КАК ДатаНачала, 	НачисленияИУдержания.ДатаОкончания КАК ДатаОкончания, 	НачисленияИУдержания.ПериодДействия КАК ПериодДействия, 	НачисленияИУдержания.Регистратор КАК Регистратор, 	НачисленияИУдержания.ДокументОснование КАК ДокументОснование, 	НачисленияИУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки, 	ИСТИНА КАК НачислениеТекущегоПериода ПОМЕСТИТЬ ВТНачисленияИУдержанияБезКадровыхДанных ИЗ 	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияИУдержания ГДЕ 	НачисленияИУдержания.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) 	И ВЫБОР 			КОГДА &ЕстьФильтрПоОрганизации 				ТОГДА НачисленияИУдержания.Организация = &Организация 			ИНАЧЕ ИСТИНА 		КОНЕЦ 	И ВЫБОР 			КОГДА &ЕстьФильтрПоСотрудникам 				ТОГДА НачисленияИУдержания.ФизическоеЛицо В (&ФизическиеЛица) 			ИНАЧЕ ИСТИНА 		КОНЕЦ  СГРУППИРОВАТЬ ПО 	НачисленияИУдержания.Период, 	НачисленияИУдержания.ФизическоеЛицо, 	НачисленияИУдержания.Подразделение, 	НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты, 	НачисленияИУдержания.НачислениеУдержание, 	НачисленияИУдержания.Организация, 	НачисленияИУдержания.Сотрудник, 	НачисленияИУдержания.ДатаНачала, 	НачисленияИУдержания.ДатаОкончания, 	НачисленияИУдержания.ПериодДействия, 	НачисленияИУдержания.Регистратор, 	НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ), 	НачисленияИУдержания.ДокументОснование, 	НачисленияИУдержания.ИдентификаторСтроки  ОБЪЕДИНИТЬ  ВЫБРАТЬ РАЗЛИЧНЫЕ 	НАЧАЛОПЕРИОДА(НачисленияИУдержания.ПериодДействия, МЕСЯЦ), 	НачисленияИУдержания.Период, 	НачисленияИУдержания.ФизическоеЛицо, 	НачисленияИУдержания.Подразделение, 	НачисленияИУдержания.ГруппаНачисленияУдержанияВыплаты, 	НачисленияИУдержания.НачислениеУдержание, 	0, 	НачисленияИУдержания.Организация, 	НачисленияИУдержания.Сотрудник, 	НачисленияИУдержания.ДатаНачала, 	НачисленияИУдержания.ДатаОкончания, 	НачисленияИУдержания.ПериодДействия, 	НачисленияИУдержания.Регистратор, 	НачисленияИУдержания.ДокументОснование, 	НачисленияИУдержания.ИдентификаторСтроки, 	ЛОЖЬ ИЗ 	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияИУдержания ГДЕ 	НачисленияИУдержания.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) 	И НачисленияИУдержания.ПериодДействия <> НАЧАЛОПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ) 	И ВЫБОР 			КОГДА &ЕстьФильтрПоОрганизации 				ТОГДА НачисленияИУдержания.Организация = &Организация 			ИНАЧЕ ИСТИНА 		КОНЕЦ 	И ВЫБОР 			КОГДА &ЕстьФильтрПоСотрудникам 				ТОГДА НачисленияИУдержания.ФизическоеЛицо В (&ФизическиеЛица) 			ИНАЧЕ ИСТИНА 		КОНЕЦ ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 	ОстаткиИОбороты.Организация КАК Организация, 	ОстаткиИОбороты.Сотрудник КАК Сотрудник, 	ОстаткиИОбороты.ФизическоеЛицо КАК ФизическоеЛицо, 	ОстаткиИОбороты.Подразделение КАК Подразделение, 	КОНЕЦПЕРИОДА(ОстаткиИОбороты.Период, МЕСЯЦ) КАК Период ПОМЕСТИТЬ ВТВсеСотрудникиСПериодом ИЗ 	ВТОстаткиИОборотыВзаиморасчетовССотрудниками КАК ОстаткиИОбороты  ОБЪЕДИНИТЬ  ВЫБРАТЬ РАЗЛИЧНЫЕ 	НачисленияИУдержания.Организация, 	НачисленияИУдержания.Сотрудник, 	НачисленияИУдержания.ФизическоеЛицо, 	НачисленияИУдержания.Подразделение, 	КОНЕЦПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ) ИЗ 	ВТНачисленияИУдержанияБезКадровыхДанных КАК НачисленияИУдержания  ОБЪЕДИНИТЬ  ВЫБРАТЬ РАЗЛИЧНЫЕ 	НачисленияИУдержания.Организация, 	НачисленияИУдержания.Сотрудник, 	НачисленияИУдержания.ФизическоеЛицо, 	НачисленияИУдержания.Подразделение, 	НачисленияИУдержания.ДатаНачала ИЗ 	ВТНачисленияИУдержанияБезКадровыхДанных КАК НачисленияИУдержания ГДЕ 	НачисленияИУдержания.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1) ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗЛИЧНЫЕ 	ОстаткиИОбороты.Организация КАК Организация, 	ОстаткиИОбороты.Сотрудник КАК Сотрудник, 	ОстаткиИОбороты.ФизическоеЛицо КАК ФизическоеЛицо, 	ОстаткиИОбороты.Подразделение КАК Подразделение, 	Месяцы.Период КАК Месяц ПОМЕСТИТЬ ВТСотрудникиМесяцы ИЗ 	ВТВсеСотрудникиСПериодом КАК ОстаткиИОбороты 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияПериоды КАК Месяцы 		ПО (ИСТИНА) ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗЛИЧНЫЕ 	ОстаткиИОбороты.Сотрудник КАК Сотрудник, 	ОстаткиИОбороты.Период КАК Период ПОМЕСТИТЬ ВТВсеПериодомКадровыхДанных ИЗ 	ВТВсеСотрудникиСПериодом КАК ОстаткиИОбороты  ОБЪЕДИНИТЬ  ВЫБРАТЬ РАЗЛИЧНЫЕ 	ОстаткиИОбороты.Сотрудник, 	ОстаткиИОбороты.Месяц ИЗ 	ВТСотрудникиМесяцы КАК ОстаткиИОбороты  ОБЪЕДИНИТЬ  ВЫБРАТЬ РАЗЛИЧНЫЕ 	ОстаткиИОбороты.Сотрудник, 	КОНЕЦПЕРИОДА(ОстаткиИОбороты.Месяц, МЕСЯЦ) ИЗ 	ВТСотрудникиМесяцы КАК ОстаткиИОбороты ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 	ТаблицаОтборов.Период КАК Период, 	ТаблицаОтборов.Сотрудник КАК Сотрудник, 	СправочникСотрудники.ФизическоеЛицо КАК ФизическоеЛицо ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников ИЗ 	ВТВсеПериодомКадровыхДанных КАК ТаблицаОтборов 		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники 		ПО ТаблицаОтборов.Сотрудник = СправочникСотрудники.Ссылка ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ИзмеренияДаты.Сотрудник КАК Сотрудник, 	ИзмеренияДаты.Период КАК Период, 	РегистрСведений.Организация КАК Организация, 	РегистрСведений.Подразделение КАК Подразделение, 	РегистрСведений.Должность КАК Должность ПОМЕСТИТЬ ВТСведенияКадровойИсторииСотрудников ИЗ 	ВТОтборовРазличныхСотрудников КАК ИзмеренияДаты 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК РегистрСведений 		ПО (РегистрСведений.ДатаНачала <= ВЫБОР 				КОГДА ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1) 					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59) 				ИНАЧЕ КОНЕЦПЕРИОДА(ИзмеренияДаты.Период, ДЕНЬ) 			КОНЕЦ) 			И (РегистрСведений.ДатаОкончания >= ВЫБОР 				КОГДА ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1) 					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59) 				ИНАЧЕ КОНЕЦПЕРИОДА(ИзмеренияДаты.Период, ДЕНЬ) 			КОНЕЦ) 			И (РегистрСведений.Сотрудник = ИзмеренияДаты.Сотрудник) 			И (РегистрСведений.ФизическоеЛицо = ИзмеренияДаты.Сотрудник.ФизическоеЛицо)  ИНДЕКСИРОВАТЬ ПО 	Сотрудник ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ИзмеренияДаты.Сотрудник КАК Сотрудник, 	ИзмеренияДаты.Период КАК Период, 	РегистрСведений.ГрафикРаботы КАК ГрафикРаботы ПОМЕСТИТЬ ПредставленияГрафиковРаботыСотрудников ИЗ 	ВТОтборовРазличныхСотрудников КАК ИзмеренияДаты 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикРаботыСотрудниковИнтервальный КАК РегистрСведений 		ПО (РегистрСведений.ДатаНачала <= ВЫБОР 				КОГДА ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1) 					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59) 				ИНАЧЕ КОНЕЦПЕРИОДА(ИзмеренияДаты.Период, ДЕНЬ) 			КОНЕЦ) 			И (РегистрСведений.ДатаОкончания >= ВЫБОР 				КОГДА ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1) 					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59) 				ИНАЧЕ КОНЕЦПЕРИОДА(ИзмеренияДаты.Период, ДЕНЬ) 			КОНЕЦ) 			И (РегистрСведений.Сотрудник = ИзмеренияДаты.Сотрудник)  СГРУППИРОВАТЬ ПО 	ИзмеренияДаты.Сотрудник, 	ИзмеренияДаты.Период, 	РегистрСведений.ГрафикРаботы  ИНДЕКСИРОВАТЬ ПО 	Сотрудник ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ТаблицаОтборов.Период КАК Период, 	ТаблицаОтборов.Сотрудник КАК Сотрудник, 	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо, 	КадроваяИсторияСотрудников.Организация КАК Организация, 	КадроваяИсторияСотрудников.Подразделение КАК Подразделение, 	КадроваяИсторияСотрудников.Должность КАК Должность, 	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения ПОМЕСТИТЬ ПредставленияКадровыеДанныеСотрудников ИЗ 	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников 		ПО ТаблицаОтборов.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник 		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКадровойИсторииСотрудников КАК КадроваяИсторияСотрудников 		ПО ТаблицаОтборов.Сотрудник = КадроваяИсторияСотрудников.Сотрудник 			И ТаблицаОтборов.Период = КадроваяИсторияСотрудников.Период ;  //////////////////////////////////////////////////////////////////////////////// УНИЧТОЖИТЬ ВТОтборовРазличныхСотрудников ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	СотрудникиМесяцы.Организация КАК Организация, 	СотрудникиМесяцы.Сотрудник КАК Сотрудник, 	СотрудникиМесяцы.ФизическоеЛицо КАК ФизическоеЛицо, 	СотрудникиМесяцы.Подразделение КАК Подразделение, 	СотрудникиМесяцы.Месяц КАК Месяц, 	МАКСИМУМ(ОстаткиИОбороты.Период) КАК ПоследнийМесяцОстатков ПОМЕСТИТЬ ВТСотрудникиМесяцыОстатков ИЗ 	ВТСотрудникиМесяцы КАК СотрудникиМесяцы 		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОборотыВзаиморасчетовССотрудниками КАК ОстаткиИОбороты 		ПО СотрудникиМесяцы.Организация = ОстаткиИОбороты.Организация 			И СотрудникиМесяцы.Сотрудник = ОстаткиИОбороты.Сотрудник 			И СотрудникиМесяцы.ФизическоеЛицо = ОстаткиИОбороты.ФизическоеЛицо 			И СотрудникиМесяцы.Подразделение = ОстаткиИОбороты.Подразделение 			И СотрудникиМесяцы.Месяц >= ОстаткиИОбороты.Период  СГРУППИРОВАТЬ ПО 	СотрудникиМесяцы.Организация, 	СотрудникиМесяцы.Сотрудник, 	СотрудникиМесяцы.ФизическоеЛицо, 	СотрудникиМесяцы.Подразделение, 	СотрудникиМесяцы.Месяц ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	СотрудникиМесяцыОстатков.Организация КАК Организация, 	СотрудникиМесяцыОстатков.Сотрудник КАК Сотрудник, 	СотрудникиМесяцыОстатков.ФизическоеЛицо КАК ФизическоеЛицо, 	СотрудникиМесяцыОстатков.Подразделение КАК Подразделение, 	ЕСТЬNULL(ОстаткиИОбороты.НачальныйОстаток, ОстаткиИОборотыПоследние.КонечныйОстаток) КАК НачальныйОстаток, 	ЕСТЬNULL(ОстаткиИОбороты.КонечныйОстаток, ОстаткиИОборотыПоследние.КонечныйОстаток) КАК КонечныйОстаток, 	КОНЕЦПЕРИОДА(СотрудникиМесяцыОстатков.Месяц, МЕСЯЦ) КАК Период ПОМЕСТИТЬ ВТСальдоВсеСотрудникиПериоды ИЗ 	ВТСотрудникиМесяцыОстатков КАК СотрудникиМесяцыОстатков 		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОборотыВзаиморасчетовССотрудниками КАК ОстаткиИОбороты 		ПО СотрудникиМесяцыОстатков.Организация = ОстаткиИОбороты.Организация 			И СотрудникиМесяцыОстатков.Сотрудник = ОстаткиИОбороты.Сотрудник 			И СотрудникиМесяцыОстатков.ФизическоеЛицо = ОстаткиИОбороты.ФизическоеЛицо 			И СотрудникиМесяцыОстатков.Подразделение = ОстаткиИОбороты.Подразделение 			И СотрудникиМесяцыОстатков.Месяц = ОстаткиИОбороты.Период 		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОборотыВзаиморасчетовССотрудниками КАК ОстаткиИОборотыПоследние 		ПО СотрудникиМесяцыОстатков.Организация = ОстаткиИОборотыПоследние.Организация 			И СотрудникиМесяцыОстатков.Сотрудник = ОстаткиИОборотыПоследние.Сотрудник 			И СотрудникиМесяцыОстатков.ФизическоеЛицо = ОстаткиИОборотыПоследние.ФизическоеЛицо 			И СотрудникиМесяцыОстатков.Подразделение = ОстаткиИОборотыПоследние.Подразделение 			И СотрудникиМесяцыОстатков.ПоследнийМесяцОстатков = ОстаткиИОборотыПоследние.Период ГДЕ 	(НЕ ЕСТЬNULL(ОстаткиИОборотыПоследние.КонечныйОстаток, ОстаткиИОбороты.НачальныйОстаток) ЕСТЬ NULL 			ИЛИ НЕ ОстаткиИОбороты.КонечныйОстаток ЕСТЬ NULL) ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник, 	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо, 	ВзаиморасчетыССотрудниками.Организация КАК Организация, 	ВзаиморасчетыССотрудниками.НачальныйОстаток КАК НачальныйОстаток, 	ВзаиморасчетыССотрудниками.КонечныйОстаток КАК КонечныйОстаток, 	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК Период, 	КадровыеДанныеСотрудников.Должность КАК ДолжностьНаКонецПериода, 	КадровыеДанныеСотрудников.Подразделение КАК ПодразделениеНаКонецПериода, 	ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботыНаКонецПериода ПОМЕСТИТЬ ВТСальдоПоРасчетамССотрудниками ИЗ 	ВТСальдоВсеСотрудникиПериоды КАК ВзаиморасчетыССотрудниками 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников 		ПО ВзаиморасчетыССотрудниками.Сотрудник = КадровыеДанныеСотрудников.Сотрудник 			И (КОНЕЦПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) = КадровыеДанныеСотрудников.Период) 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияГрафиковРаботыСотрудников КАК ГрафикиРаботыСотрудников 		ПО ВзаиморасчетыССотрудниками.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник 			И (КОНЕЦПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) = ГрафикиРаботыСотрудников.Период) ГДЕ 	ВЫБОР 			КОГДА ВзаиморасчетыССотрудниками.НачальныйОстаток <> 0 				ТОГДА ИСТИНА 			КОГДА ВзаиморасчетыССотрудниками.КонечныйОстаток <> 0 				ТОГДА ИСТИНА 			КОГДА КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1) 				ТОГДА ИСТИНА 			КОГДА КадровыеДанныеСотрудников.ДатаУвольнения >= НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) 				ТОГДА ИСТИНА 			ИНАЧЕ ЛОЖЬ 		КОНЕЦ ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК МесяцНачисления, 	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо, 	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов КАК ВидРасчета, 	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК Сумма, 	ВЫБОР 		КОГДА НЕ ВзаиморасчетыССотрудниками.Подразделение.Владелец ЕСТЬ NULL 			ТОГДА ВзаиморасчетыССотрудниками.Подразделение.Владелец 		КОГДА КадровыеДанныеСотрудников.Организация <> ЗНАЧЕНИЕ(СПРАВОЧНИК.Организации.ПустаяСсылка) 			ТОГДА КадровыеДанныеСотрудников.Организация 		ИНАЧЕ ВзаиморасчетыССотрудниками.Организация 	КОНЕЦ КАК Организация, 	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник, 	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК ПериодДействия, 	ВзаиморасчетыССотрудниками.Регистратор КАК Регистратор, 	КадровыеДанныеСотрудников.Должность КАК ДолжностьНаКонецПериода, 	КадровыеДанныеСотрудников.Подразделение КАК ПодразделениеНаКонецПериода, 	ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботыНаКонецПериода ПОМЕСТИТЬ ВТДвиженияВзаиморасчетов ИЗ 	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников 		ПО ВзаиморасчетыССотрудниками.Сотрудник = КадровыеДанныеСотрудников.Сотрудник 			И (КОНЕЦПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) = КадровыеДанныеСотрудников.Период) 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияГрафиковРаботыСотрудников КАК ГрафикиРаботыСотрудников 		ПО ВзаиморасчетыССотрудниками.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник 			И (КОНЕЦПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) = ГрафикиРаботыСотрудников.Период) ГДЕ 	ВзаиморасчетыССотрудниками.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) 	И ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ПустаяСсылка) 	И ВЫБОР 			КОГДА &ЕстьФильтрПоОрганизации 				ТОГДА ВзаиморасчетыССотрудниками.Организация = &Организация 			ИНАЧЕ ИСТИНА 		КОНЕЦ 	И ВЫБОР 			КОГДА &ЕстьФильтрПоСотрудникам 				ТОГДА ВзаиморасчетыССотрудниками.ФизическоеЛицо В (&ФизическиеЛица) 			ИНАЧЕ ИСТИНА 		КОНЕЦ ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	НачисленияИУдержания.МесяцНачисления КАК МесяцНачисления, 	НачисленияИУдержания.ФизическоеЛицо КАК ФизическоеЛицо, 	НачисленияИУдержания.Подразделение КАК Подразделение, 	НачисленияИУдержания.Группа КАК Группа, 	НачисленияИУдержания.ВидРасчета КАК ВидРасчета, 	НачисленияИУдержания.Сумма КАК Сумма, 	НачисленияИУдержания.Организация КАК Организация, 	НачисленияИУдержания.Сотрудник КАК Сотрудник, 	НачисленияИУдержания.ДатаНачала КАК ДатаНачала, 	НачисленияИУдержания.ДатаОкончания КАК ДатаОкончания, 	НачисленияИУдержания.ПериодДействия КАК ПериодДействия, 	НачисленияИУдержания.Регистратор КАК Регистратор, 	КадровыеДанныеСотрудниковНаКонецПериода.Должность КАК ДолжностьНаКонецПериода, 	КадровыеДанныеСотрудниковНаКонецПериода.Подразделение КАК ПодразделениеНаКонецПериода, 	ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботыНаКонецПериода, 	НачисленияИУдержания.ДокументОснование КАК ДокументОснование, 	НачисленияИУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки, 	НачисленияИУдержания.НачислениеТекущегоПериода КАК НачислениеТекущегоПериода ПОМЕСТИТЬ ВТНачисленияИУдержанияСКадровымиДанными ИЗ 	ВТНачисленияИУдержанияБезКадровыхДанных КАК НачисленияИУдержания 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковНаКонецПериода 		ПО НачисленияИУдержания.Сотрудник = КадровыеДанныеСотрудниковНаКонецПериода.Сотрудник 			И (КОНЕЦПЕРИОДА(НачисленияИУдержания.МесяцНачисления, МЕСЯЦ) = КадровыеДанныеСотрудниковНаКонецПериода.Период) 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияГрафиковРаботыСотрудников КАК ГрафикиРаботыСотрудников 		ПО НачисленияИУдержания.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник 			И (КОНЕЦПЕРИОДА(НачисленияИУдержания.Период, МЕСЯЦ) = ГрафикиРаботыСотрудников.Период) ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ВТНачисленияИУдержанияСКадровымиДанными.Организация КАК Организация, 	ВТНачисленияИУдержанияСКадровымиДанными.ФизическоеЛицо КАК ФизическоеЛицо, 	ВТНачисленияИУдержанияСКадровымиДанными.Сотрудник КАК Сотрудник, 	ВТНачисленияИУдержанияСКадровымиДанными.ДатаОкончания КАК ДатаОкончания, 	МАКСИМУМ(ПредставленияКадровыеДанныеСотрудников.Период) КАК Период ПОМЕСТИТЬ ВТПериодыКадровыхДанныхНаКонецНачисленияМакс ИЗ 	ВТНачисленияИУдержанияСКадровымиДанными КАК ВТНачисленияИУдержанияСКадровымиДанными 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыеДанныеСотрудников КАК ПредставленияКадровыеДанныеСотрудников 		ПО ВТНачисленияИУдержанияСКадровымиДанными.Организация = ПредставленияКадровыеДанныеСотрудников.Организация 			И ВТНачисленияИУдержанияСКадровымиДанными.ФизическоеЛицо = ПредставленияКадровыеДанныеСотрудников.ФизическоеЛицо 			И ВТНачисленияИУдержанияСКадровымиДанными.Сотрудник = ПредставленияКадровыеДанныеСотрудников.Сотрудник 			И ВТНачисленияИУдержанияСКадровымиДанными.ДатаОкончания >= ПредставленияКадровыеДанныеСотрудников.Период  СГРУППИРОВАТЬ ПО 	ВТНачисленияИУдержанияСКадровымиДанными.Организация, 	ВТНачисленияИУдержанияСКадровымиДанными.ФизическоеЛицо, 	ВТНачисленияИУдержанияСКадровымиДанными.Сотрудник, 	ВТНачисленияИУдержанияСКадровымиДанными.ДатаОкончания ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.Организация КАК Организация, 	ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.ФизическоеЛицо КАК ФизическоеЛицо, 	ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.Сотрудник КАК Сотрудник, 	ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.ДатаОкончания КАК ДатаОкончания, 	ПредставленияКадровыеДанныеСотрудников.Подразделение КАК Подразделение, 	ПредставленияКадровыеДанныеСотрудников.Должность КАК Должность ПОМЕСТИТЬ ПредставленияКадровыхДанныхНаКонецНачисления ИЗ 	ВТПериодыКадровыхДанныхНаКонецНачисленияМакс КАК ВТПериодыКадровыхДанныхНаКонецНачисленияМакс 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыеДанныеСотрудников КАК ПредставленияКадровыеДанныеСотрудников 		ПО ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.Организация = ПредставленияКадровыеДанныеСотрудников.Организация 			И ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.ФизическоеЛицо = ПредставленияКадровыеДанныеСотрудников.ФизическоеЛицо 			И ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.Сотрудник = ПредставленияКадровыеДанныеСотрудников.Сотрудник 			И ВТПериодыКадровыхДанныхНаКонецНачисленияМакс.Период = ПредставленияКадровыеДанныеСотрудников.Период ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	НАЧАЛОПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ) КАК МесяцНачисления, 	ОтработанноеВремя.Регистратор КАК Регистратор, 	ОтработанноеВремя.Сотрудник КАК Сотрудник, 	ОтработанноеВремя.Организация КАК Организация, 	ОтработанноеВремя.Подразделение КАК Подразделение, 	ОтработанноеВремя.Начисление КАК ВидРасчета, 	ОтработанноеВремя.ВремяВЧасах КАК ВремяВЧасах, 	ОтработанноеВремя.ИдентификаторСтроки КАК ИдентификаторСтроки, 	ОтработанноеВремя.ОтработаноДней КАК ОтработаноДней, 	ОтработанноеВремя.ОтработаноЧасов КАК ОтработаноЧасов, 	ОтработанноеВремя.ОплаченоДней КАК ОплаченоДней, 	ОтработанноеВремя.ОплаченоЧасов КАК ОплаченоЧасов ПОМЕСТИТЬ ВТПериодыОтработанноеВремяСКорректировками ИЗ 	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремя ГДЕ 	ОтработанноеВремя.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) 	И ВЫБОР 			КОГДА &ЕстьФильтрПоОрганизации 				ТОГДА ОтработанноеВремя.Организация = &Организация 			ИНАЧЕ ИСТИНА 		КОНЕЦ 	И ВЫБОР 			КОГДА &ЕстьФильтрПоСотрудникам 				ТОГДА ОтработанноеВремя.ФизическоеЛицо В (&ФизическиеЛица) 			ИНАЧЕ ИСТИНА 		КОНЕЦ  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	НАЧАЛОПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ), 	ОтработанноеВремя.Регистратор, 	ОтработанноеВремя.Сотрудник, 	ОтработанноеВремя.Организация, 	ОтработанноеВремя.Подразделение, 	ОтработанноеВремя.Начисление, 	ОтработанноеВремя.ВремяВЧасах, 	ОтработанноеВремя.ИдентификаторСтроки, 	ОтработанноеВремя.ОтработаноДней, 	NULL, 	ОтработанноеВремя.ОплаченоДней, 	NULL ИЗ 	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремя ГДЕ 	ОтработанноеВремя.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) 	И ВЫБОР 			КОГДА &ЕстьФильтрПоОрганизации 				ТОГДА ОтработанноеВремя.Организация = &Организация 			ИНАЧЕ ИСТИНА 		КОНЕЦ 	И ВЫБОР 			КОГДА &ЕстьФильтрПоСотрудникам 				ТОГДА ОтработанноеВремя.ФизическоеЛицо В (&ФизическиеЛица) 			ИНАЧЕ ИСТИНА 		КОНЕЦ ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ОтработанноеВремяВПериодахСКорректировками.МесяцНачисления КАК МесяцНачисления, 	ОтработанноеВремяВПериодахСКорректировками.Регистратор КАК Регистратор, 	ОтработанноеВремяВПериодахСКорректировками.Сотрудник КАК Сотрудник, 	ОтработанноеВремяВПериодахСКорректировками.Организация КАК Организация, 	ОтработанноеВремяВПериодахСКорректировками.Подразделение КАК Подразделение, 	ОтработанноеВремяВПериодахСКорректировками.ВидРасчета КАК ВидРасчета, 	ОтработанноеВремяВПериодахСКорректировками.ВремяВЧасах КАК ВремяВЧасах, 	ОтработанноеВремяВПериодахСКорректировками.ИдентификаторСтроки КАК ИдентификаторСтроки, 	СУММА(ОтработанноеВремяВПериодахСКорректировками.ОтработаноДней) КАК ОтработаноДней, 	СУММА(ОтработанноеВремяВПериодахСКорректировками.ОтработаноЧасов) КАК ОтработаноЧасов, 	СУММА(ОтработанноеВремяВПериодахСКорректировками.ОплаченоДней) КАК ОплаченоДней, 	СУММА(ОтработанноеВремяВПериодахСКорректировками.ОплаченоЧасов) КАК ОплаченоЧасов ПОМЕСТИТЬ ПредставленияОтработанноеВремя ИЗ 	ВТПериодыОтработанноеВремяСКорректировками КАК ОтработанноеВремяВПериодахСКорректировками  СГРУППИРОВАТЬ ПО 	ОтработанноеВремяВПериодахСКорректировками.МесяцНачисления, 	ОтработанноеВремяВПериодахСКорректировками.Регистратор, 	ОтработанноеВремяВПериодахСКорректировками.Сотрудник, 	ОтработанноеВремяВПериодахСКорректировками.Подразделение, 	ОтработанноеВремяВПериодахСКорректировками.ВидРасчета, 	ОтработанноеВремяВПериодахСКорректировками.ВремяВЧасах, 	ОтработанноеВремяВПериодахСКорректировками.ИдентификаторСтроки, 	ОтработанноеВремяВПериодахСКорректировками.Организация ;  //////////////////////////////////////////////////////////////////////////////// УНИЧТОЖИТЬ ВТПериодыОтработанноеВремяСКорректировками ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	ДанныеСотрудников.Организация КАК Организация, 	ДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо, 	ДанныеСотрудников.Сотрудник КАК Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода КАК ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода КАК ПодразделениеНаКонецПериода, 	ДанныеСотрудников.МесяцНачисления КАК МесяцНачисления, 	ДанныеСотрудников.Группа КАК Группа, 	ДанныеСотрудников.ВидРасчета КАК ВидРасчета, 	СУММА(ДанныеСотрудников.Сумма) КАК Сумма, 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОтработаноДней, 0)) КАК ОтработаноДней, 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОтработаноЧасов, 0)) КАК ОтработаноЧасов, 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОплаченоДней, 0)) КАК ОплаченоДней, 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОплаченоЧасов, 0)) КАК ОплаченоЧасов, 	NULL КАК СпособВыплаты, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Дата 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ КАК ДатаДокументаОснования, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Номер 		ИНАЧЕ &quot;&quot; 	КОНЕЦ КАК НомерДокументаОснования, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА &quot;Больничный&quot; 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 				ИЛИ ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА &quot;Отпуск&quot; 		ИНАЧЕ &quot;&quot; 	КОНЕЦ КАК ТипДокументаОснования, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаНачала 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаНачалаПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаНачала 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ КАК ДатаНачалаПериодаОтсутсвия, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаОкончания 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаОкончанияПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаОкончания 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ КАК ДатаОкончанияПериодаОтсутствия, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода КАК ГрафикРаботыНаКонецПериода, 	ПредставленияКадровыхДанныхНаКонецНачисления.Подразделение КАК ПодразделениеНаКонецНачисления, 	ПредставленияКадровыхДанныхНаКонецНачисления.Должность КАК ДолжностьНаКонецНачисления, 	ДанныеСотрудников.ДатаНачала КАК ДатаНачала, 	ДанныеСотрудников.ДатаОкончания КАК ДатаОкончания ПОМЕСТИТЬ ОбщиеЗапросыНачисленияУдержания ИЗ 	ВТНачисленияИУдержанияСКадровымиДанными КАК ДанныеСотрудников 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияОтработанноеВремя КАК ОтработанноеВремя 		ПО ДанныеСотрудников.Регистратор = ОтработанноеВремя.Регистратор 			И ДанныеСотрудников.Организация = ОтработанноеВремя.Организация 			И ДанныеСотрудников.Сотрудник = ОтработанноеВремя.Сотрудник 			И ДанныеСотрудников.Подразделение = ОтработанноеВремя.Подразделение 			И ДанныеСотрудников.ВидРасчета = ОтработанноеВремя.ВидРасчета 			И ДанныеСотрудников.МесяцНачисления = ОтработанноеВремя.МесяцНачисления 			И ДанныеСотрудников.ИдентификаторСтроки = ОтработанноеВремя.ИдентификаторСтроки 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыхДанныхНаКонецНачисления КАК ПредставленияКадровыхДанныхНаКонецНачисления 		ПО ДанныеСотрудников.Организация = ПредставленияКадровыхДанныхНаКонецНачисления.Организация 			И ДанныеСотрудников.ФизическоеЛицо = ПредставленияКадровыхДанныхНаКонецНачисления.ФизическоеЛицо 			И ДанныеСотрудников.Сотрудник = ПредставленияКадровыхДанныхНаКонецНачисления.Сотрудник 			И ДанныеСотрудников.ДатаОкончания = ПредставленияКадровыхДанныхНаКонецНачисления.ДатаОкончания ГДЕ 	ДанныеСотрудников.НачислениеТекущегоПериода  СГРУППИРОВАТЬ ПО 	ДанныеСотрудников.МесяцНачисления, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Группа, 	ДанныеСотрудников.ВидРасчета, 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	ПредставленияКадровыхДанныхНаКонецНачисления.Подразделение, 	ПредставленияКадровыхДанныхНаКонецНачисления.Должность, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Дата 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Номер 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА &quot;Больничный&quot; 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 				ИЛИ ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА &quot;Отпуск&quot; 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаНачала 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаНачалаПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаНачала 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаОкончания 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаОкончанияПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаОкончания 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ДанныеСотрудников.ДатаНачала, 	ДанныеСотрудников.ДатаОкончания  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.МесяцНачисления, 	ДанныеСотрудников.Группа, 	ДанныеСотрудников.ВидРасчета, 	СУММА(ДанныеСотрудников.Сумма), 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОтработаноДней, 0)), 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОтработаноЧасов, 0)), 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОплаченоДней, 0)), 	СУММА(ЕСТЬNULL(ОтработанноеВремя.ОплаченоЧасов, 0)), 	NULL, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Дата 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Номер 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА &quot;Больничный&quot; 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 				ИЛИ ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА &quot;Отпуск&quot; 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаНачала 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаНачалаПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаНачала 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаОкончания 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаОкончанияПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаОкончания 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	ПредставленияКадровыхДанныхНаКонецНачисления.Подразделение, 	ПредставленияКадровыхДанныхНаКонецНачисления.Должность, 	ДанныеСотрудников.ДатаНачала, 	ДанныеСотрудников.ДатаОкончания ИЗ 	ВТНачисленияИУдержанияСКадровымиДанными КАК ДанныеСотрудников 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияОтработанноеВремя КАК ОтработанноеВремя 		ПО ДанныеСотрудников.Регистратор = ОтработанноеВремя.Регистратор 			И ДанныеСотрудников.Организация = ОтработанноеВремя.Организация 			И ДанныеСотрудников.Сотрудник = ОтработанноеВремя.Сотрудник 			И ДанныеСотрудников.Подразделение = ОтработанноеВремя.Подразделение 			И ДанныеСотрудников.ВидРасчета = ОтработанноеВремя.ВидРасчета 			И ДанныеСотрудников.МесяцНачисления = ОтработанноеВремя.МесяцНачисления 			И ДанныеСотрудников.ИдентификаторСтроки = ОтработанноеВремя.ИдентификаторСтроки 		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияКадровыхДанныхНаКонецНачисления КАК ПредставленияКадровыхДанныхНаКонецНачисления 		ПО ДанныеСотрудников.Организация = ПредставленияКадровыхДанныхНаКонецНачисления.Организация 			И ДанныеСотрудников.ФизическоеЛицо = ПредставленияКадровыхДанныхНаКонецНачисления.ФизическоеЛицо 			И ДанныеСотрудников.Сотрудник = ПредставленияКадровыхДанныхНаКонецНачисления.Сотрудник 			И ДанныеСотрудников.ДатаОкончания = ПредставленияКадровыхДанныхНаКонецНачисления.ДатаОкончания ГДЕ 	НЕ ДанныеСотрудников.НачислениеТекущегоПериода 	И НЕ ОтработанноеВремя.МесяцНачисления ЕСТЬ NULL  СГРУППИРОВАТЬ ПО 	ДанныеСотрудников.МесяцНачисления, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Группа, 	ДанныеСотрудников.ВидРасчета, 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	ПредставленияКадровыхДанныхНаКонецНачисления.Подразделение, 	ПредставленияКадровыхДанныхНаКонецНачисления.Должность, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Дата 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Дата 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).Номер 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).Номер 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА &quot;Больничный&quot; 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 				ИЛИ ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА &quot;Отпуск&quot; 		ИНАЧЕ &quot;&quot; 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаНачала 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаНачалаПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаНачала 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ВЫБОР 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.БольничныйЛист 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.БольничныйЛист).ДатаОкончания 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.Отпуск 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.Отпуск).ДатаОкончанияПериодаОтсутствия 		КОГДА ДанныеСотрудников.ДокументОснование ССЫЛКА Документ.ОтпускПоУходуЗаРебенком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком).ДатаОкончания 		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) 	КОНЕЦ, 	ДанныеСотрудников.ДатаНачала, 	ДанныеСотрудников.ДатаОкончания  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.МесяцНачисления, 	ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено), 	ДанныеСотрудников.ВидРасчета, 	СУММА(ДанныеСотрудников.Сумма), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	ВЫБОР 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыВБанк).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыВКассу).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыПеречислением).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком).СпособВыплаты 		ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	NULL, 	NULL, 	NULL, 	NULL ИЗ 	ВТДвиженияВзаиморасчетов КАК ДанныеСотрудников  СГРУППИРОВАТЬ ПО 	ДанныеСотрудников.МесяцНачисления, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.ВидРасчета, 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	ВЫБОР 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыВБанк).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыВКассу).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыПеречислением).СпособВыплаты 		КОГДА ДанныеСотрудников.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком 			ТОГДА ВЫРАЗИТЬ(ДанныеСотрудников.Регистратор КАК Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком).СпособВыплаты 		ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.Период, 	ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо), 	NULL, 	СУММА(ДанныеСотрудников.КонечныйОстаток), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	NULL, 	NULL, 	NULL, 	NULL ИЗ 	ВТСальдоПоРасчетамССотрудниками КАК ДанныеСотрудников  СГРУППИРОВАТЬ ПО 	ДанныеСотрудников.Период, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.Период, 	ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо), 	NULL, 	СУММА(ДанныеСотрудников.НачальныйОстаток), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	СУММА(0), 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода, 	NULL, 	NULL, 	NULL, 	NULL ИЗ 	ВТСальдоПоРасчетамССотрудниками КАК ДанныеСотрудников  СГРУППИРОВАТЬ ПО 	ДанныеСотрудников.Период, 	ДанныеСотрудников.ФизическоеЛицо, 	ДанныеСотрудников.Организация, 	ДанныеСотрудников.Сотрудник, 	ДанныеСотрудников.ДолжностьНаКонецПериода, 	ДанныеСотрудников.ПодразделениеНаКонецПериода, 	ДанныеСотрудников.ГрафикРаботыНаКонецПериода ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ РАЗРЕШЕННЫЕ 	Данные.Организация КАК Организация, 	Данные.ФизическоеЛицо КАК ФизическоеЛицо, 	Данные.Сотрудник КАК Сотрудник, 	Данные.ДолжностьНаКонецПериода КАК ДолжностьНаКонецПериода, 	Данные.ПодразделениеНаКонецПериода КАК ПодразделениеНаКонецПериода, 	Данные.МесяцНачисления КАК МесяцНачисления, 	Данные.Группа КАК Группа, 	Данные.ВидРасчета КАК ВидРасчета, 	Данные.Сумма КАК Сумма, 	Данные.ОтработаноДней КАК ОтработаноДней, 	Данные.ОтработаноЧасов КАК ОтработаноЧасов, 	Данные.ОплаченоДней КАК ОплаченоДней, 	Данные.ОплаченоЧасов КАК ОплаченоЧасов, 	Данные.СпособВыплаты КАК СпособВыплаты, 	Данные.ДатаДокументаОснования КАК ДатаДокументаОснования, 	Данные.НомерДокументаОснования КАК НомерДокументаОснования, 	Данные.ТипДокументаОснования КАК ТипДокументаОснования, 	Данные.ДатаНачалаПериодаОтсутсвия КАК ДатаНачалаПериодаОтсутсвия, 	Данные.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияПериодаОтсутствия, 	Данные.ПодразделениеНаКонецНачисления КАК ПодразделениеНаКонецНачисления, 	Данные.ДолжностьНаКонецНачисления КАК ДолжностьНаКонецНачисления, 	Данные.ГрафикРаботыНаКонецПериода КАК ГрафикРаботыНаКонецПериода, 	Данные.ДатаНачала КАК ДатаНачала, 	Данные.ДатаОкончания КАК ДатаОкончания ПОМЕСТИТЬ ОбщийИтог ИЗ 	ОбщиеЗапросыНачисленияУдержания КАК Данные ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ОбщийИтог.Организация КАК Организация, 	ОбщийИтог.ФизическоеЛицо КАК ФизическоеЛицо, 	ОбщийИтог.Сотрудник КАК Сотрудник, 	ОбщийИтог.ДолжностьНаКонецПериода КАК ДолжностьНаКонецПериода, 	ОбщийИтог.ПодразделениеНаКонецПериода КАК ПодразделениеНаКонецПериода, 	ОбщийИтог.МесяцНачисления КАК МесяцНачисления, 	ОбщийИтог.Группа КАК Группа, 	СУММА(ОбщийИтог.Сумма) КАК Итог, 	СУММА(ОбщийИтог.ОтработаноДней) КАК ОтработаноДней, 	СУММА(ОбщийИтог.ОтработаноЧасов) КАК ОтработаноЧасов, 	СУММА(ОбщийИтог.ОплаченоДней) КАК ОплаченоДней, 	СУММА(ОбщийИтог.ОплаченоЧасов) КАК ОплаченоЧасов, 	ОбщийИтог.ГрафикРаботыНаКонецПериода КАК ГрафикРаботыНаКонецПериода ПОМЕСТИТЬ ИтогПоГруппам ИЗ 	ОбщийИтог КАК ОбщийИтог  СГРУППИРОВАТЬ ПО 	ОбщийИтог.Организация, 	ОбщийИтог.ФизическоеЛицо, 	ОбщийИтог.Сотрудник, 	ОбщийИтог.ДолжностьНаКонецПериода, 	ОбщийИтог.ПодразделениеНаКонецПериода, 	ОбщийИтог.МесяцНачисления, 	ОбщийИтог.Группа, 	ОбщийИтог.ГрафикРаботыНаКонецПериода ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ИтогПоГруппам.Организация КАК Организация, 	ИтогПоГруппам.ФизическоеЛицо КАК ФизическоеЛицо, 	ИтогПоГруппам.Сотрудник КАК Сотрудник, 	ИтогПоГруппам.ДолжностьНаКонецПериода КАК ДолжностьНаКонецПериода, 	ИтогПоГруппам.ПодразделениеНаКонецПериода КАК ПодразделениеНаКонецПериода, 	ИтогПоГруппам.МесяцНачисления КАК МесяцНачисления, 	ИтогПоГруппам.Группа КАК Группа, 	ИтогПоГруппам.Итог КАК Итог, 	ИтогПоГруппам.ОтработаноДней КАК ОтработаноДней, 	ИтогПоГруппам.ОтработаноЧасов КАК ОтработаноЧасов, 	ИтогПоГруппам.ОплаченоДней КАК ОплаченоДней, 	ИтогПоГруппам.ОплаченоЧасов КАК ОплаченоЧасов, 	ИтогПоГруппам.ГрафикРаботыНаКонецПериода КАК ГрафикРаботыНаКонецПериода, 	СУММА(ВЫБОР 			КОГДА ИтогПоГруппам.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) 					ИЛИ ИтогПоГруппам.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано) 				ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение 			ИНАЧЕ 0 		КОНЕЦ) КАК ПлановыеДни, 	СУММА(ВЫБОР 			КОГДА ИтогПоГруппам.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) 					ИЛИ ИтогПоГруппам.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано) 				ТОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение 			ИНАЧЕ 0 		КОНЕЦ) КАК ПлановыеЧасы ПОМЕСТИТЬ ИтогПоГруппамСПлановымВременем ИЗ 	ИтогПоГруппам КАК ИтогПоГруппам 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени 		ПО ИтогПоГруппам.ГрафикРаботыНаКонецПериода = ГрафикиРаботыПоВидамВремени.ГрафикРаботы 			И ИтогПоГруппам.МесяцНачисления = ГрафикиРаботыПоВидамВремени.Месяц 			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))  СГРУППИРОВАТЬ ПО 	ИтогПоГруппам.Организация, 	ИтогПоГруппам.ФизическоеЛицо, 	ИтогПоГруппам.Сотрудник, 	ИтогПоГруппам.ДолжностьНаКонецПериода, 	ИтогПоГруппам.ПодразделениеНаКонецПериода, 	ИтогПоГруппам.МесяцНачисления, 	ИтогПоГруппам.Группа, 	ИтогПоГруппам.Итог, 	ИтогПоГруппам.ОтработаноДней, 	ИтогПоГруппам.ОтработаноЧасов, 	ИтогПоГруппам.ОплаченоДней, 	ИтогПоГруппам.ОплаченоЧасов, 	ИтогПоГруппам.ГрафикРаботыНаКонецПериода ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ОбщийИтог.Сотрудник КАК Сотрудник, 	ВЫБОР 		КОГДА ЕСТЬNULL(ОбщийИтог.ДатаОкончания, КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ)) <> ДАТАВРЕМЯ(1, 1, 1) 			ТОГДА ЕСТЬNULL(ОбщийИтог.ДатаОкончания, КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ)) 		ИНАЧЕ КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ) 	КОНЕЦ КАК ПериодСбораДанных ПОМЕСТИТЬ ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокументаБезГруппировки ИЗ 	ОбщийИтог КАК ОбщийИтог  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ИтогПоГруппам.Сотрудник, 	КОНЕЦПЕРИОДА(ИтогПоГруппам.МесяцНачисления, МЕСЯЦ) ИЗ 	ИтогПоГруппам КАК ИтогПоГруппам ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	Группировка.Сотрудник КАК Сотрудник, 	Группировка.ПериодСбораДанных КАК ПериодСбораДанных ПОМЕСТИТЬ ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокументаБезГруппировки КАК Группировка  СГРУППИРОВАТЬ ПО 	Группировка.Сотрудник, 	Группировка.ПериодСбораДанных ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник КАК Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных КАК ПериодСбораДанных, 	ИзменениеГрафикаРаботыСпискомСотрудники.Ссылка.ДатаИзменения КАК ДатаДокумента, 	ИзменениеГрафикаРаботыСпискомСотрудники.Ссылка КАК Документ ПОМЕСТИТЬ ВТ_КадровыеДокументыПоДатам ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеГрафикаРаботыСписком.Сотрудники КАК ИзменениеГрафикаРаботыСпискомСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ИзменениеГрафикаРаботыСпискомСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ИзменениеГрафикаРаботыСпискомСотрудники.Ссылка.ДатаИзменения 			И (ИзменениеГрафикаРаботыСпискомСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ИзменениеОплатыТруда.ДатаИзменения, 	ИзменениеОплатыТруда.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеОплатыТруда КАК ИзменениеОплатыТруда 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ИзменениеОплатыТруда.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ИзменениеОплатыТруда.ДатаИзменения 			И (ИзменениеОплатыТруда.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ИзменениеПлановыхНачисленийСотрудники.Ссылка.ДатаИзменения, 	ИзменениеПлановыхНачисленийСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ИзменениеПлановыхНачисленийСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ИзменениеПлановыхНачисленийСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ИзменениеПлановыхНачисленийСотрудники.Ссылка.ДатаИзменения 			И (ИзменениеПлановыхНачисленийСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	КадровыйПеревод.ДатаНачала, 	КадровыйПеревод.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = КадровыйПеревод.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= КадровыйПеревод.ДатаНачала 			И (КадровыйПеревод.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	КадровыйПереводСпискомСотрудники.ДатаНачала, 	КадровыйПереводСпискомСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = КадровыйПереводСпискомСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= КадровыйПереводСпискомСотрудники.ДатаНачала 			И (КадровыйПереводСпискомСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ИндексацияЗаработкаСотрудники.Ссылка.МесяцИндексации, 	ИндексацияЗаработкаСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИндексацияЗаработка.Сотрудники КАК ИндексацияЗаработкаСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ИндексацияЗаработкаСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ИндексацияЗаработкаСотрудники.Ссылка.МесяцИндексации 			И (ИндексацияЗаработкаСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения, 	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения 			И (ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ПриемНаРаботу.ДатаПриема, 	ПриемНаРаботу.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ПриемНаРаботу.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ПриемНаРаботу.ДатаПриема 			И (ПриемНаРаботу.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	ПриемНаРаботуСпискомСотрудники.ДатаПриема, 	ПриемНаРаботуСпискомСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = ПриемНаРаботуСпискомСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= ПриемНаРаботуСпискомСотрудники.ДатаПриема 			И (ПриемНаРаботуСпискомСотрудники.Ссылка.Проведен)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник, 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных, 	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Дата, 	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка ИЗ 	ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента КАК ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники 		ПО ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.Сотрудник = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник 			И ВТ_ГруппировкаДляОпределенияПоследнегоКадровогоДокумента.ПериодСбораДанных >= НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Дата 			И (НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Проведен) ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ВТ_КадровыеДокументыПоДатам.Сотрудник КАК Сотрудник, 	ВТ_КадровыеДокументыПоДатам.ПериодСбораДанных КАК ПериодСбораДанных, 	МАКСИМУМ(ВТ_КадровыеДокументыПоДатам.ДатаДокумента) КАК МаксДатаДокумента ПОМЕСТИТЬ ВТ_МаксимальнаяДатаКадровогоДокумента ИЗ 	ВТ_КадровыеДокументыПоДатам КАК ВТ_КадровыеДокументыПоДатам  СГРУППИРОВАТЬ ПО 	ВТ_КадровыеДокументыПоДатам.Сотрудник, 	ВТ_КадровыеДокументыПоДатам.ПериодСбораДанных ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ВТ_МаксимальнаяДатаКадровогоДокумента.Сотрудник КАК Сотрудник, 	ВТ_МаксимальнаяДатаКадровогоДокумента.ПериодСбораДанных КАК ПериодСбораДанных, 	МАКСИМУМ(ВТ_КадровыеДокументыПоДатам.Документ) КАК Документ ПОМЕСТИТЬ ВТ_МаксимальныйКадровыйДокумент ИЗ 	ВТ_КадровыеДокументыПоДатам КАК ВТ_КадровыеДокументыПоДатам 		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальнаяДатаКадровогоДокумента КАК ВТ_МаксимальнаяДатаКадровогоДокумента 		ПО ВТ_КадровыеДокументыПоДатам.Сотрудник = ВТ_МаксимальнаяДатаКадровогоДокумента.Сотрудник 			И ВТ_КадровыеДокументыПоДатам.ПериодСбораДанных = ВТ_МаксимальнаяДатаКадровогоДокумента.ПериодСбораДанных 			И ВТ_КадровыеДокументыПоДатам.ДатаДокумента = ВТ_МаксимальнаяДатаКадровогоДокумента.МаксДатаДокумента  СГРУППИРОВАТЬ ПО 	ВТ_МаксимальнаяДатаКадровогоДокумента.Сотрудник, 	ВТ_МаксимальнаяДатаКадровогоДокумента.ПериодСбораДанных ;  //////////////////////////////////////////////////////////////////////////////// ВЫБРАТЬ 	ОбщийИтог.Организация КАК Организация, 	ОбщийИтог.ФизическоеЛицо КАК ФизическоеЛицо, 	ОбщийИтог.Сотрудник КАК Сотрудник, 	ОбщийИтог.ДолжностьНаКонецПериода КАК ДолжностьНаКонецПериода, 	ОбщийИтог.ПодразделениеНаКонецПериода КАК ПодразделениеНаКонецПериода, 	ОбщийИтог.МесяцНачисления КАК МесяцНачисления, 	ОбщийИтог.Группа КАК Группа, 	ОбщийИтог.ВидРасчета КАК ВидРасчета, 	ОбщийИтог.Сумма КАК Сумма, 	ОбщийИтог.ОтработаноДней КАК ОтработаноДней, 	ОбщийИтог.ОтработаноЧасов КАК ОтработаноЧасов, 	ОбщийИтог.ОплаченоДней КАК ОплаченоДней, 	ОбщийИтог.ОплаченоЧасов КАК ОплаченоЧасов, 	ОбщийИтог.СпособВыплаты КАК СпособВыплаты, 	ОбщийИтог.ДатаДокументаОснования КАК ДатаДокументаОснования, 	ОбщийИтог.НомерДокументаОснования КАК НомерДокументаОснования, 	ОбщийИтог.ТипДокументаОснования КАК ТипДокументаОснования, 	ОбщийИтог.ДатаНачалаПериодаОтсутсвия КАК ДатаНачалаПериодаОтсутсвия, 	ОбщийИтог.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияПериодаОтсутствия, 	ОбщийИтог.ПодразделениеНаКонецНачисления КАК ПодразделениеНаКонецНачисления, 	ОбщийИтог.ДолжностьНаКонецНачисления КАК ДолжностьНаКонецНачисления, 	ОбщийИтог.ГрафикРаботыНаКонецПериода КАК ГрафикРаботыНаКонецПериода, 	0 КАК Итог, 	0 КАК ПлановыеДни, 	0 КАК ПлановыеЧасы, 	ОбщийИтог.ПодразделениеНаКонецПериода.Наименование КАК ПодразделениеНаКонецПериодаНаименование, 	ОбщийИтог.Организация.Наименование КАК ОрганизацияНаименование, 	ОбщийИтог.ДатаНачала КАК ДатаНачалаНачисления, 	ОбщийИтог.ДатаОкончания КАК ДатаОкончанияНачисления, 	ВТ_МаксимальныйКадровыйДокумент.Документ КАК ПоследнийКадровыйДокумент ИЗ 	ОбщийИтог КАК ОбщийИтог 		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксимальныйКадровыйДокумент КАК ВТ_МаксимальныйКадровыйДокумент 		ПО ОбщийИтог.Сотрудник = ВТ_МаксимальныйКадровыйДокумент.Сотрудник 			И (ВЫБОР 				КОГДА ЕСТЬNULL(ОбщийИтог.ДатаОкончания, КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ)) <> ДАТАВРЕМЯ(1, 1, 1) 					ТОГДА ЕСТЬNULL(ОбщийИтог.ДатаОкончания, КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ)) 				ИНАЧЕ КОНЕЦПЕРИОДА(ОбщийИтог.МесяцНачисления, МЕСЯЦ) 			КОНЕЦ = ВТ_МаксимальныйКадровыйДокумент.ПериодСбораДанных)  ОБЪЕДИНИТЬ ВСЕ  ВЫБРАТЬ 	ИтогПоГруппамСПлановымВременем.Организация, 	ИтогПоГруппамСПлановымВременем.ФизическоеЛицо, 	ИтогПоГруппамСПлановымВременем.Сотрудник, 	ИтогПоГруппамСПлановымВременем.ДолжностьНаКонецПериода, 	ИтогПоГруппамСПлановымВременем.ПодразделениеНаКонецПериода, 	ИтогПоГруппамСПлановымВременем.МесяцНачисления, 	ИтогПоГруппамСПлановымВременем.Группа, 	NULL, 	NULL, 	ИтогПоГруппамСПлановымВременем.ОтработаноДней, 	ИтогПоГруппамСПлановымВременем.ОтработаноЧасов, 	ИтогПоГруппамСПлановымВременем.ОплаченоДней, 	ИтогПоГруппамСПлановымВременем.ОплаченоЧасов, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	NULL, 	ИтогПоГруппамСПлановымВременем.ГрафикРаботыНаКонецПериода, 	ИтогПоГруппамСПлановымВременем.Итог, 	ИтогПоГруппамСПлановымВременем.ПлановыеДни, 	ИтогПоГруппамСПлановымВременем.ПлановыеЧасы, 	ИтогПоГруппамСПлановымВременем.ПодразделениеНаКонецПериода.Наименование, 	ИтогПоГруппамСПлановымВременем.Организация.Наименование, 	NULL, 	NULL, 	ВТ_МаксимальныйКадровыйДокумент.Документ ИЗ 	ИтогПоГруппамСПлановымВременем КАК ИтогПоГруппамСПлановымВременем 		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксимальныйКадровыйДокумент КАК ВТ_МаксимальныйКадровыйДокумент 		ПО ИтогПоГруппамСПлановымВременем.Сотрудник = ВТ_МаксимальныйКадровыйДокумент.Сотрудник 			И (КОНЕЦПЕРИОДА(ИтогПоГруппамСПлановымВременем.МесяцНачисления, МЕСЯЦ) = ВТ_МаксимальныйКадровыйДокумент.ПериодСбораДанных)  УПОРЯДОЧИТЬ ПО 	Сотрудник, 	Группа";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&quot;", Символы.ВК+"""");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", Символы.ВК+"ВЫБРАТЬ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ";", ";"+Символы.ВК);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ЕстьФильтрПоОрганизации", 	ПараметрыЗапроса.ЕстьФильтрПоОрганизации);
	Запрос.УстановитьПараметр("ЕстьФильтрПоСотрудникам", 	ПараметрыЗапроса.ЕстьФильтрПоСотрудникам);
	Запрос.УстановитьПараметр("КонецПериода", 				ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", 				ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", 				ПараметрыЗапроса.Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", 			ПараметрыЗапроса.ФизическиеЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Сотрудники = "";
				
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Найти(Сотрудники, Строка(ВыборкаДетальныеЗаписи.ФизическоеЛицо)) > 0 Тогда
			Продолжить;
		Иначе
			Сотрудники = Сотрудники + ";" + Строка(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		КонецЕсли;	
		
		Вложение = Новый Соответствие;
		Попытка
			ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
			//Т.К. версионирование у нас только для метпаданных. пока ошибку обходим через попытку
			Попытка
				Результат = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(
				            ВыборкаДетальныеЗаписи.ФизическоеЛицо,
							ВыборкаДетальныеЗаписи.Организация,
							ПараметрыЗапроса.НачалоПериода,
							ПараметрыЗапроса.КонецПериода,
							ОтчетРасчетныйЛисток);
			Исключение
				//Начиная с Версии ЗУП 3.1.24.408			
				Результат = ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
				            ВыборкаДетальныеЗаписи.ФизическоеЛицо,
							ВыборкаДетальныеЗаписи.Организация,
							ПараметрыЗапроса.НачалоПериода,
							ПараметрыЗапроса.КонецПериода,
							ОтчетРасчетныйЛисток);
			КонецПопытки;
			ДокументРезультат = Результат.ДокументРезультат;
			
			НазваниеПФ = "Расчетный листок от " + Формат(ПараметрыЗапроса.НачалоПериода, "ДЛФ=Д") + " по " + Формат(ПараметрыЗапроса.КонецПериода, "ДЛФ=Д") + " для " + Строка(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
			Вложение["Название"] = НазваниеПФ; 
			
			ПотокВПамяти = Новый ПотокВПамяти;
			ДокументРезультат.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
			ФайлBase64 = Base64Строка(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
						
			Вложение["Файл"] = Новый Соответствие;
			Вложение["Файл"].Вставить("Имя", НазваниеПФ+".pdf");
			Вложение["Файл"].Вставить("ДвоичныеДанные", ФайлBase64);
			Вложение["Файл"].Вставить("ContentType", "application/pdf");;
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
		КонецПопытки; 
		
        МассивВложений = Новый Массив;
		МассивВложений.Добавить(Вложение);
		
		ПараметрыПКД = Новый Структура("НачалоПериода, КонецПериода, Организация, ФизическоеЛицо, _print_forms",
		ПараметрыЗапроса.НачалоПериода,
		ПараметрыЗапроса.КонецПериода,
		ПараметрыЗапроса.Организация,
		ВыборкаДетальныеЗаписи.ФизическоеЛицо,
		МассивВложений);
		
		ПараметрыВызова.Добавить(ПараметрыПКД);
	КонецЦикла;	
	
	Возврат ПараметрыВызова;
КонецФункции

#КонецОбласти

#Область КолонкиСостояния

/////********************************************
// КОЛОНКИ СОСТОЯНИ

//Точка Входа - ДобавитьКолонкиВДинамическийСписок


Процедура ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения = Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Сотрудник");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	
	МассивКолонок = Новый Массив;
	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"КЭДО");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".ИндексКартинки, 0)" );
	КолонкаДопТаблицы.Вставить("Заголовок",		"КЭДО");
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок["Saby_Bird"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	//КолонокаДопТаблицы = Новый Структура;
	//КолонокаДопТаблицы.Вставить("Имя",				"КЭДО");
	//КолонокаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".КЭДО, Ложь)");
	//КолонокаДопТаблицы.Вставить("Заголовок",		"КЭДО");
	//КолонокаДопТаблицы.Вставить("ОтображатьНаФорме",Истина);
	//МассивКолонок.Добавить(КолонокаДопТаблицы);

	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Сотрудник")
	ТекстЗапросаКЭДО = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДС.Объект КАК Сотрудник,
	|1 КАК ИндексКартинки,
	|ДС.Значение КАК КЭДО
	|ПОМЕСТИТЬ СвойстваКЭДО
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДС
	|ГДЕ
	|	ДС.Свойство.Имя = ""КЭДО""
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
    |";
	
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("ИмяСпискаНаФорме",	НаименованиеРеквизитаСписок);
	ПарамтерыДопТаблицы.Вставить("ВременнаяТаблица",	ТекстЗапросаКЭДО);
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма, ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;
КонецПроцедуры


//Подготовка структуры объединяемых данных
Процедура ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения		= Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Объект");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	
	МассивКолонок		= Новый Массив;
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"СостояниеКартинка");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние.ИндексКартинки, 10)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"SABY");
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок["Saby_Состояния"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"Состояние");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Состояние SABY");
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Ложь);
	МассивКолонок.Добавить(КолонкаДопТаблицы);

	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"АктивныйЭтап");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".АктивныйЭтап, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Активный этап");
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаСостояния(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Документ")
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"РегистрСведений.Saby_Состояние");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"Saby_Состояние");
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма,	ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкиВДинамическийСписокПриИзмененииЗапроса(Форма, ИмяРеквизитаСписок) Экспорт
	//ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВДинамическийСписок(Форма) Экспорт
	ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	
	//Запрос списка Формы списка справочника сотрудников меняется динамически и от сюда работать не будет
	//Пока закоментирован, Код оставлен для других справочников
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВСправочники(Контекст, НаименованиеРеквизитаСписок) Экспорт 
	Если ОбъектыФормыИзПодсистемыКадры(Контекст) Тогда
		//Сейчас захвачен справочник "Сотрудники", сделано на будущее, когда, будут захвачены другие справочники
		//У справочника сотр
		ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, "Сотрудник");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВДокументы(Контекст, НаименованиеРеквизитаСписок) Экспорт
	Если ОбъектыФормыИзПодсистемыКадры(Контекст) Тогда
		ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, "Сотрудник");
	КонецЕсли;
	ДобавитьКолонкиСтатусаСостояния(Контекст, НаименованиеРеквизитаСписок, "Ссылка");
КонецПроцедуры

Функция ЛевоеПолеСоединенияНайдено(Знач ДоступныеПоля, Знач ПолноеИмяПоля)
	ПолеНайдено 	= Ложь;
	мПолей			= СтрРазделить(ПолноеИмяПоля, ".", Ложь);
	НайденноеПоле	= ДоступныеПоля.Найти(мПолей[0]);
	Если НайденноеПоле <> Неопределено Тогда
		ПолеНайдено		= Истина;
		ВырезаемоеПоле	= мПолей[0] + ?(мПолей.Количество()>0,".","");
		ПолеДляПроверки	= Прав(ПолноеИмяПоля, СтрДлина(ПолноеИмяПоля) - СтрДлина(ВырезаемоеПоле));
		Если Не ПустаяСтрока(ПолеДляПроверки) Тогда
			ПолеНайдено = ЛевоеПолеСоединенияНайдено(НайденноеПоле.Поля, ПолеДляПроверки);
		КонецЕсли;
	КонецЕсли;
	Возврат ПолеНайдено;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ИзменитьЗапросДинамическогоСписока(Контекст, СтруктураПараметров)
	УспешноеВыполнение = Ложь;
	ЭлементФормы				= Контекст.Элементы.Найти(СтруктураПараметров.ИмяСпискаНаФорме);
	Если ЭлементФормы  = Неопределено Тогда
		//Заглушка от падения при переходе по ссылкам формы
		Возврат УспешноеВыполнение;
	Иначе
		Список	= Контекст[СтруктураПараметров.ИмяСпискаНаФорме];
	КонецЕсли;
	Если ТипЗнч(Список) <> Тип("ДинамическийСписок") Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	ОсновнаяТаблица 	= Список.ОсновнаяТаблица;
	
	Схема = Новый СхемаЗапроса();
	Если Найти(Список.ТекстЗапроса, СтруктураПараметров.ТаблицаДанных) = 0 Тогда
		Если НЕ Список.ПроизвольныйЗапрос Тогда
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+"ВЫБРАТЬ * ИЗ " + Список.ОсновнаяТаблица);
		Иначе
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+Список.ТекстЗапроса);
		КонецЕсли;
	Иначе
		Схема.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	КонецЕСли;
	Если Схема.ПакетЗапросов.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	Запрос = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
	Если Запрос.Операторы.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	ОператорВыбрать = Запрос.Операторы[0];
		
	ОсновнойИсточник = Неопределено;
	КорневыеИсточники = ОператорВыбрать.Источники.ПолучитьКорневыеИсточники();
	Для каждого Источник Из КорневыеИсточники Цикл
		Если ТипЗнч(Источник.Источник)=Тип("ТаблицаСхемыЗапроса")
			И ВРег(Источник.Источник.ИмяТаблицы)=ВРег(Список.ОсновнаяТаблица)
			Тогда
			ОсновнойИсточник = Источник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнойИсточник=Неопределено И КорневыеИсточники.Количество() > 0 Тогда
		ОсновнойИсточник = КорневыеИсточники[0];
	КонецЕсли;
	Если ОсновнойИсточник=Неопределено Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	
	ДопТаблицаДанных	= СтруктураПараметров.ТаблицаДанных;
	ПсевдонимДопТаблицы	= СтруктураПараметров.Псевдоним;
	ПостфиксКолонок		= СтруктураПараметров.ПостфиксКолонок;
	
	ИсточникДопДанные	= ОператорВыбрать.Источники.НайтиПоИмени(ДопТаблицаДанных);
	Если ИсточникДопДанные = Неопределено Тогда
		//Обход ошибки повторных вызовов
		ИсточникДопДанные	= ОператорВыбрать.Источники.Добавить(ДопТаблицаДанных, ПсевдонимДопТаблицы);
	КонецЕсли;
	ИсточникДопДанные.Соединения.Очистить();
	
	//Условие = СтрШаблон("%1.Ссылка = ДопДанные.СкладскоеЗадание",ОсновнойИсточник.Источник.Псевдоним);
	Условие = "";
	Для каждого ИменаПолей Из СтруктураПараметров.ПоляСоединения Цикл
		Если Не ЛевоеПолеСоединенияНайдено(ОсновнойИсточник.Источник.ДоступныеПоля, ИменаПолей.Ключ) Тогда
			Возврат УспешноеВыполнение;
		КонецЕсли;
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", "") + СтрШаблон("%1."+ИменаПолей.Ключ+" = "+ПсевдонимДопТаблицы+"."+ИменаПолей.Значение, ОсновнойИсточник.Источник.Псевдоним);
	КонецЦикла;
	
	Если Не ОсновнойИсточник.Соединения.Добавить(ИсточникДопДанные, Условие) Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;

	Соединение					= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения	= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если ОператорВыбрать.ВыбираемыеПоля.Найти(ДопКолонка.ПутьКДанным) = Неопределено Тогда
			Поле				= ОператорВыбрать.ВыбираемыеПоля.Добавить(ДопКолонка.ПутьКДанным);
			Колонка				= Запрос.Колонки.Найти(Поле);
			Колонка.Псевдоним	= ПостфиксКолонок+ДопКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	//Исправление псевдонимов полей СКД после обработки запроса через объект "СхемаЗапроса"
	Для каждого ВыражениеОтбораСКД Из ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных Цикл
		ПсевдонимПоле = СтрНайти(ВыражениеОтбораСКД.Псевдоним, "Поле");
		Если ПсевдонимПоле = 1 Тогда
			ПостфиксПсевдонима = СтрЗаменить(ВыражениеОтбораСКД.Псевдоним, "Поле", "");
			Попытка
				НомерПоля = Число(ПостфиксПсевдонима);
				ВыражениеОтбораСКД.Псевдоним = "";
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Соединение				= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	Список.ТекстЗапроса		= Схема.ПолучитьТекстЗапроса();
	Список.ОсновнаяТаблица	= ОсновнаяТаблица;
	УспешноеВыполнение		= Истина;
	Возврат УспешноеВыполнение;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ДобавитьКолонкиНаФорму(Контекст, СтруктураПараметров)
	КолонкиУспешноДобавлены = Ложь;
	ПостфиксКолонок = СтруктураПараметров.ПостфиксКолонок;
	
	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если Не ДопКолонка.ОтображатьНаФорме Тогда Продолжить; КонецЕсли;
		Попытка
			Если Контекст.Элементы.Найти(ПостфиксКолонок+ДопКолонка.Имя) = Неопределено Тогда
				Элемент = Контекст.Элементы.Добавить(ПостфиксКолонок+ДопКолонка.Имя,Тип("ПолеФормы"),Контекст.Элементы[СтруктураПараметров.ИмяСпискаНаФорме]);
			Иначе
				//Поле уже существует
				Продолжить;
			КонецЕСли;
		Исключение
			КолонкиУспешноДобавлены = Ложь;
			Прервать;
		КонецПопытки;
		Если ДопКолонка.Свойство("Картинка") Тогда 
			Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
			Элемент.Ширина				= 1;
			Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.КартинкаЗначений	= ДопКолонка.Картинка;
		КонецЕсли;
		Элемент.ПутьКДанным			= СтруктураПараметров.ИмяСпискаНаФорме+"."+ПостфиксКолонок+ДопКолонка.Имя;
		Элемент.Заголовок			= ДопКолонка.Заголовок;
		Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
		КолонкиУспешноДобавлены = Истина;
	КонецЦикла;
	Возврат КолонкиУспешноДобавлены; 
КонецФункции

#КонецОбласти

#Область ФильтрыДинамическогоСписка

// Фильтр на форме динамического списка
//Добавляет действия на панель задач формы
Процедура УстановитьФильтры(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт
//Код оставлен на будущее!
//	дСписок	= Форма[НаименованиеРеквизитаСписок];
//	
//	ЭлементОтбора =  дСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеСБИС");
//	ЭлементОтбора.ПравоеЗначение = Неопределено;
//	ЭлементОтбора.Использование = Ложь;
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Раскрасим форму/список 
Процедура УстановитьУсловноеОформление(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт 

КонецПроцедуры

#КонецОбласти 

