
#Область ОбщиеИСервисныеМетоды

//**** МЕТАДАННЫЕ *****
Функция ЭтотОбъектМетаданныхЗахвачен(Контекст) Экспорт
	//Присутствует хоть один из обрабатываемых типов
	МассивДоступныхТипов = Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.Типы();

	Для Каждого ТипИсточника Из Контекст.ТипыИсточников Цикл
		НайденПоддерживаемыйДокументОбмена = Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.СодержитТип(ТипИсточника);
		Если НЕ НайденПоддерживаемыйДокументОбмена Тогда
			Продолжить;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных) 
	ТипСсылки = Неопределено;
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("ДокументСсылка."+ОбъектМетаданных.Имя);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("СправочникСсылка."+ОбъектМетаданных.Имя);
	КонецЕсли;
	Возврат ТипСсылки;
КонецФункции // ПолучитьТипСсылкиПоМетаданным()

Функция ОпределитьТипМетаданныхИсточника(Контекст) Экспорт
	ТипОбъекта	= Неопределено;
	//Определяем по первому элементу. т.к. смешанных списков быть не должно то и
	//документы не могут быть по определению в одном списке со справочниками
	Для Каждого ТипИсточника Из Контекст.ТипыИсточников Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИсточника); 
		ТипОбъекта	= ?(Метаданные.Справочники.Содержит(ОбъектМетаданных), "Справочник", ТипОбъекта);
		ТипОбъекта	= ?(ТипОбъекта = Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных), "Документ", ТипОбъекта);
		Прервать;
	КонецЦикла;	
	Возврат ТипОбъекта;
КонецФункции

#Область include_base_ОбъектыФормыИзПодсистемыКадры
#КонецОбласти


Функция ПринадлежитОбъектМетаданныхПодсистеме(ТипОбъекта, Подсистема)
	Возврат Подсистема.Состав.Содержит( Метаданные.НайтиПоТипу(ТипОбъекта) );
КонецФункции


//**** ФОРМА *****

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодготовитьСтруктуруОписанияФормы(Форма) Экспорт
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("ИмяФормы",			Форма.ИмяФормы);
	ОписаниеФормы.Вставить("ТипыИсточников",	Новый Массив);
	ОписаниеФормы.Вставить("Форма",				Форма);

	ТипОбъекта			= ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы));
	ОбъектМетаданных	= Метаданные.НайтиПоТипу(ТипОбъекта);
	ЭтоЖурналДокументов	= ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
	
	Если ЭтоЖурналДокументов Тогда
		Попытка
			ТипыОбъектовОповещения = Форма.ТипыОбъектовОповещения;
		Исключение
			ТипыОбъектовОповещения = Новый Массив;
		КонецПопытки;
		Для каждого ТипМетаданных Из ТипыОбъектовОповещения Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипМетаданных.Значение);
            Если ОбъектМетаданных <> Неопределено Тогда
				ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
				Если ТипСсылки <> Неопределено Тогда
					ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
		Если ТипСсылки <> Неопределено Тогда
			ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеФормы;
КонецФункции // ПодготовитьСтруктуруОписанияФормы()

//Ищем в элементах формы таблицу значений с типом данных Динамический список
Функция ПолучитьНаименованиеРеквизитаСписка(Форма) Экспорт
	КоличествоДинамическийхСписков = 0;
	ИмяЭлементаСписка = "";
	ИменаСписков = Новый Массив;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			Если НЕ ЭлементФормы.Видимость ИЛИ Найти(ЭлементФормы.ПутьКДанным, ".") > 0 Тогда Продолжить; КонецЕсли;
			Если ТипЗнч(Форма.ЭтотОбъект[ЭлементФормы.ПутьКДанным]) = Тип("ДинамическийСписок") Тогда
				ИменаСписков.Добавить(ЭлементФормы.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Мы договорились, что колонки добавляются только на форму с одним динамическим списком
	Если ИменаСписков.Количество() > 0 Тогда
		ИмяЭлементаСписка = ИменаСписков[0];
		Если ИменаСписков.Количество() > 1 Тогда
			//Ести видимых динамических списков на форме несколько 
			//отдадим предпочтение первому у кого в названии встречается слово - "Список"
			Для каждого ИмяСписка Из ИменаСписков Цикл
				Если Найти(ИмяСписка, "Список") > 0 Тогда
					ИмяЭлементаСписка = ИмяСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяЭлементаСписка;
КонецФункции // ПолучитьНаименованиеРеквизитаСписка()

Функция ЭтоФормаИсключения(Форма) Экспорт
	ФормыИсключения = Новый Массив();
 	ФормыИсключения.Добавить("ОбщаяФорма.ОсновнаяФормаРабочегоСтола");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаСписка");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаВыбора");
 	ФормыИсключения.Добавить("ЖурналДокументов.Взаимодействия.Форма.ФормаСписка"); //ERP на главном экране
	Результат = ФормыИсключения.Найти(Форма.ИмяФормы) <> Неопределено;
	Возврат Результат;
КонецФункции

Функция ЭтоФормаСписка(Форма) Экспорт
	Результат = Найти(Форма.ИмяФормы, ".ФормаСписка") > 0;
	Возврат Результат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьСтруктуруДопТаблицы()
	СтруктураДопТаблицы = Новый Структура;
	СтруктураДопТаблицы.Вставить("ВременнаяТаблица", 	"");
	СтруктураДопТаблицы.Вставить("ТаблицаДанных");
	СтруктураДопТаблицы.Вставить("Псевдоним");
	СтруктураДопТаблицы.Вставить("СтруктураКолонок");
	СтруктураДопТаблицы.Вставить("ПостфиксКолонок",		"SABY_Колонки_");
	СтруктураДопТаблицы.Вставить("ПоляСоединения",		Новый Структура());
	СтруктураДопТаблицы.Вставить("ИмяСпискаНаФорме",	"Список");
	
	Возврат СтруктураДопТаблицы;
КонецФункции

#КонецОбласти

#Область КомандыСБИС

//*************************************
//Группа комманд СБИС

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ДобавитьКомандыСБИС(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт

	ПолучитьСписокКомандSaby(НастройкиФормы["ТипыИсточников"], Команды);
	
	КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, СразуНаПринтер, ФорматСохранения,
	|ПереопределитьПользовательскиеНастройкиКоличества, ДополнитьКомплектВнешнимиПечатнымиФормами,
	|ФиксированныйКомплект, ДополнительныеПараметры";
	
КонецПроцедуры

Процедура ПолучитьСписокКомандSaby( Источники, Команды ) Экспорт 

	ЕстьКомандыДляСправочников = Ложь;
	ЕстьКомандыДляДокументов   = Ложь;
	ВставитьКнопкуСБИС         = Ложь;
	
	Для Каждого ТипЗначения Из Источники Цикл
		
		ОбъектМетаданных			= Метаданные.НайтиПоТипу(ТипЗначения);
		ЕстьКомандыДляСправочников	= ЕстьКомандыДляСправочников ИЛИ Метаданные.Справочники.Содержит(ОбъектМетаданных);
		ЕстьКомандыДляДокументов	= ЕстьКомандыДляДокументов ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных);
		Если ЕстьКомандыДляСправочников или ЕстьКомандыДляДокументов Тогда
			ВставитьКнопкуСБИС = Истина;	
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТиповДокументов = Новый Массив();
	Для Каждого ТипДок Из Метаданные.Документы Цикл
		МассивТиповДокументов.Добавить(ТипДок);
	КонецЦикла;
	
	Если ВставитьКнопкуСБИС Тогда
		
		Порядок = 1;			
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       "Saby_ЗагрузкаДокументов");
		НоваяКоманда.Вставить("Заголовок", "Загрузить в SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ЗагрузитьВСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
			
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);

		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       "Saby_ОткрытьВСБИС");
		НоваяКоманда.Вставить("Заголовок", "Открыть в SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОткрытьВСБИСПолучитьUID");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);

		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		
		
		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       "Saby_ВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Заголовок", "Выгрузить вложения из SABY"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
		
		Если ЕстьКомандыДляДокументов Тогда
		
			
			Порядок = Порядок + 1;
			НоваяКоманда = Новый Структура;			
			НоваяКоманда.Вставить("Имя",       "Saby_ОбновитьСтатусы");
			НоваяКоманда.Вставить("Заголовок", "Обновить статусы"); 
			НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОбновитьСтатусы");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
					
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
			
		КонецЕсли;	
		
		Порядок = Порядок + 1;		
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       "Saby_Задачи");
		НоваяКоманда.Вставить("Заголовок", "Задачи"); 
		НоваяКоманда.Вставить("Действие",  "Saby_КомандыОбменаДляФормыКлиент.ПриНажатииЗадачи");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ДобавитьКомандуНаФорму1С(КомандаSaby, Команды, МассивТиповДокументов, Порядок)
	
	ПодключаемаяКоманда = Команды.Добавить();
	ПодключаемаяКоманда.Вид                      = "SABY_КОМАНДЫ"; //ВидПодключаемойКоманды();
	ПодключаемаяКоманда.Представление            = КомандаSaby.Заголовок;
	//ПодключаемаяКоманда.Важность               = КомандаSaby.Важность;
	ПодключаемаяКоманда.Порядок                  = Порядок;
	ПодключаемаяКоманда.ТолькоВоВсехДействиях    = Ложь;
	ПодключаемаяКоманда.ТипПараметра             = Новый ОписаниеТипов(МассивТиповДокументов);
	ПодключаемаяКоманда.Назначение               = "SABY";
	ПодключаемаяКоманда.ФункциональныеОпции      = "";
	ПодключаемаяКоманда.УсловияВидимости         = Новый Массив(); //ОбщегоНазначения.СкопироватьРекурсивно(КомандаSaby.УсловияВидимости);
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.МножественныйВыбор       = Истина;
	ПодключаемаяКоманда.РежимЗаписи              = "НеЗаписывать";
	ПодключаемаяКоманда.ТребуетсяРаботаСФайлами  = Ложь;
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.Менеджер                 = "";
	ПодключаемаяКоманда.ИмяФормы                 = "";
	ПодключаемаяКоманда.ИмяПараметраФормы        = "";
	ПодключаемаяКоманда.ПараметрыФормы           = Новый Структура("ИмяИни", КомандаSaby.ИмяИни);

	ПодключаемаяКоманда.Обработчик               = КомандаSaby.Действие;
	ПодключаемаяКоманда.ДополнительныеПараметры  = Новый Структура();
	
КонецПроцедуры	

Функция ПроисходилЛиОбменДокументовСоСБИС( МассивСсылокНаДокументы, ДопПараметры=Неопределено) Экспорт 
	
	РезультатЗапроса = РегистрыСведений.Saby_Состояние.ОтобратьПоСпискуОбъектов(МассивСсылокНаДокументы);
	Результат	= Новый Структура("БылОбмен,ОбменаНебыло",Новый Массив, Новый Массив );
	
	Для Каждого СтрокаЗПР Из РезультатЗапроса Цикл
		
		Если СтрокаЗПР.Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ЗаписьОбъекта = Новый Структура("Ссылка,UID,ТипМетаданных,ТипОбъекта,ИмяИни");
		ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, СтрокаЗПР);
		ЗаписьОбъекта.Ссылка = СтрокаЗПР.Объект; 
		
		Если ЗначениеЗаполнено(ДопПараметры) Тогда
			ЗаписьОбъекта.ИмяИни = ДопПараметры.ИмяИни;
		КонецЕсли;
		
		Если СтрокаЗПР.ОбменСоСбис Тогда
			Результат.БылОбмен.Добавить(ЗаписьОбъекта);
		Иначе
			Результат.ОбменаНебыло.Добавить(ЗаписьОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

Функция ПрочитатьСписокИнишекПоТипуИС(ТипИС, Действие = Неопределено) Экспорт 
	
	// Метод на вход будет получать ИмяИС и искать все инишки согласно блоку WORKSPACE META.
	// в нем будет передаваться title с красивым названием и в дальнейшем это название будет пришиваться к кнопке
	// например "Загрузить в СБИС", "Загрузить в СБИС как сотрудник 
	
	Результат = Новый Массив;
	Если ТипИС = "Сотрудники" Тогда
		ТранспортБлокли = Обработки.SABY.Создать();
		
		context_params = ТранспортБлокли.НастройкиПодключенияПрочитать();
		мИниФайлов	= Новый Массив();
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_Сотрудники_read")); 
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_ПрочийКадровыйДокументСотрудники_read"));
		
		params	= Новый Структура("props, ini",Новый Структура("id, type_data", context_params.ConnectionId, 1),мИниФайлов,);
		res = ТранспортБлокли.local_helper_integration_api(context_params, "IntegrationConnection.ReadConnection", params);
		
		Для Каждого _ини Из res["data"] Цикл
			title = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			ini_name = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			Результат.Добавить(Новый Структура("title,ini_name,xml",title,ini_name,_ини.Значение["data"] ));
		КонецЦикла;	 
		
	Иначе
		Результат.Добавить(Новый Структура); // здесь будут инишки в случае документов. Сейчас такого нет.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция СформироватьУРЛСТикетом(УрлРесурса, Тикет)
	
	ПосОРГ3 = СтрНайти(УрлРесурса, "&org=3");
	Если ПосОРГ3 > 0 Тогда
		УрлРесурса	= Сред(УрлРесурса, 1, ПосОРГ3 - 1);
	КонецЕсли;				
	
	УрлРесурса = УрлРесурса + ?(ЗначениеЗаполнено(Тикет), "&ticket=" + Тикет, "");
	
	Возврат УрлРесурса;
	
КонецФункции

Функция ПолучитьТикет(context_params = Неопределено ) Экспорт
	
	Если context_params = Неопределено Тогда
		context_params = Saby_Core.НастройкиПодключенияПрочитать();
	КонецЕсли;
	
	ТокенSID	= Новый Структура("sid", context_params.session );
	ОбработкаСБИС = Обработки.SABY.Создать();
	Тикет_ = ОбработкаСБИС.local_helper_api(context_params, "САП.GetTicketForCurrentSid", ТокенSID );
	Тикет	= "";
	
	Если ТипЗнч(Тикет_) = Тип("Строка") Тогда
		Тикет	= Тикет_;
	КонецЕсли;
	
	Возврат Тикет; 
	
КонецФункции

Функция ПолучитьССылкиНаДокументыВСБИС(МассивИсточникДанных, ПолучитьТикет = Ложь ) Экспорт
	
	Результат = Новый Структура("ОбработаноУспешно, ОбработаноСОшибкой", Новый Массив(), Новый Массив());
	context_params= Saby_Core.НастройкиПодключенияПрочитать();
	
	Обработка	= Обработки.SABY.Создать();
	НоваяЗапись = Новый Структура("Ссылка, UID, Сообщение",,,"Ошибка получения URL");
 	//Пока, что дергаем каждый документ в отдельности
	Для Каждого ДокументИсточник Из МассивИсточникДанных Цикл
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДокументИсточник, "Ссылка, UID");
			
		Попытка
			Обработка.local_helper_write_stat(context_params, "Переход в СБИС", ДокументИсточник.Ссылка.Метаданные().Имя, 1);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
		КонецПопытки;
		
		Попытка
			result = Обработка.local_helper_read_document(context_params, Новый Структура("Идентификатор",ДокументИсточник.UID));
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
			Детали              =  Saby_Core.get_prop(СтруктураОшибки,	"detail", Неопределено);
			ДеталиОшибка		=  Saby_Core.get_prop(Детали, 			"error", Неопределено);
			ДеталиОшибкаДетали	=  Saby_Core.get_prop(ДеталиОшибка,		"details", "");
			Если СтруктураОшибки.type = "NotFound" Тогда
				НоваяЗапись.Сообщение	= result["error"]["details"];
				Результат.ОбработаноСОшибкой.Добавить(НоваяЗапись);
				
			ИначеЕсли СтрНайти(СтруктураОшибки.message + ДеталиОшибкаДетали, "Не найден документ с идентификатором") > 0 Тогда
				//Из задач и из журнала описание ошибки приходит из разных полей структуры
				ДокументаUID	= СтрЗаменить(ДеталиОшибкаДетали,"Не найден документ с идентификатором","");
				ДокументаUID	= СокрЛП(СтрЗаменить(ДокументаUID,"'",""));
				РегистрыСведений.Saby_Состояние.УдалитьПоUID(ДокументаUID);
				НоваяЗапись.Сообщение	= "Документ был удалён в SABY";
				Результат.ОбработаноСОшибкой.Добавить(НоваяЗапись);
			Иначе
				ВызватьИсключение Saby_Core.NewExtExceptionСтрока(ИнфоОбОшибке);
			КонецЕсли;
		КонецПопытки; 
		
		Если result <> Неопределено И ТипЗнч(result["СсылкаДляНашаОрганизация"]) = Тип("Строка") Тогда
			Тикет = "";
			Если ПолучитьТикет = Истина Тогда
	 			Тикет = Обработка.ПолучитьТикетТекущейСессии(context_params);
			КонецЕсли;
			АдресHTML = СформироватьУРЛСТикетом(result["СсылкаДляНашаОрганизация"], Тикет);
			НоваяЗапись.Вставить("Заголовок",СокрЛП(ДокументИсточник.Ссылка));
			НоваяЗапись.Вставить("АдресСтраницы",АдресHTML);
			Результат.ОбработаноУспешно.Добавить(НоваяЗапись);
		Иначе
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьAPI3СсылкуИзСсылкиНаОбъект(СсылкаНаОбъект, API3Объект = Неопределено)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(API3Объект) Тогда
		API3Объект = Новый Структура("ИдИС, ИмяИС, _Представление");
	КонецЕсли; 
	
	ТипЗначения = ТипЗнч(СсылкаНаОбъект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения); 
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Справочники";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Документы";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Перечисления";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект);
		КонецЕсли;  
		
		API3Объект["ИмяИС"] = ТипМетаданных + "."  + ОбъектМетаданных.Имя;
		API3Объект["_Представление"] = СокрЛП(СсылкаНаОбъект); 
		
	КонецЕсли;  
	
	Возврат API3Объект;
	
КонецФункции

Функция ПолучитьДейсвияДляОбъекта(СсылкаНаОбъект, context_params) Экспорт
	
	МОбъектов = Новый Массив();
	МОбъектов.Добавить(СсылкаНаОбъект);
	РезультатПоиска = РегистрыСведений.Saby_Состояние.ОтобратьПоСпискуОбъектов(МОбъектов);
	
	Результат		= Неопределено;
	ТранспортБлокли = Обработки.SABY.Создать();
	Для Каждого СтрокаРезультат Из РезультатПоиска Цикл
		
		Попытка
			Если Не ЗначениеЗаполнено(СтрокаРезультат.UID) Тогда
				Продолжить;
			КонецЕсли;	
			result 			= ТранспортБлокли.local_helper_read_document(context_params, Новый Структура("Идентификатор",СтрокаРезультат.UID));
			РезультатЭтап	= Saby_Core.get_prop(result, "Этап");
			Если ТипЗнч(РезультатЭтап) = Тип("Массив") И РезультатЭтап.Количество() > 0 Тогда
				Результат	= Saby_Core.get_prop(РезультатЭтап[0], "Действие", Новый Массив);
			КонецЕсли; 
			
		Исключение 
			
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
			Если СтруктураОшибки.type = "Unauthorized" Тогда
 				ВызватьИсключение Saby_Core.NewExtExceptionСтрока(ИнфоОбОшибке);
			КонецЕсли;
			СтруктураОшибкиДетали 		= Saby_Core.get_prop(СтруктураОшибки, "detail");
			СтруктураОшибкиСообщение	= Saby_Core.get_prop(СтруктураОшибки, "message");
			Результат	= Новый Структура("status, detail, message", "error",СтруктураОшибкиДетали, СтруктураОшибкиСообщение);
			
			НужноУдалитьЗапись = Ложь;
			Если ТипЗнч(СтруктураОшибкиСообщение) = Тип("Строка") И СтрНайти(СтруктураОшибкиСообщение,  "Не найден документ с идентификатором") > 0 Тогда
				НужноУдалитьЗапись = Истина;
			КонецЕсли;
			Если Не НужноУдалитьЗапись И ТипЗнч(СтруктураОшибкиДетали) = Тип("Структура") Или ТипЗнч(СтруктураОшибкиДетали) = Тип("Соответствие") Тогда
				СтруктураОшибкиДеталиОшибка = Saby_Core.get_prop(СтруктураОшибкиДетали, "error");
				Если СтрНайти(Saby_Core.get_prop(СтруктураОшибкиДеталиОшибка, "details"),  "Не найден документ с идентификатором") > 0 Тогда
					НужноУдалитьЗапись = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НужноУдалитьЗапись Тогда
				Результат	= Новый Структура("ПереотправитьОбъект",Истина);
				РегистрыСведений.Saby_Состояние.Удалить(СсылкаНаОбъект);
			КонецЕсли;
			
		КонецПопытки;
		
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Процедура ДобавитьКнопкуСБИСВСправочники() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуСБИСВДокументы() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуСБИСВЖурналДокументов() Экспорт
	
КонецПроцедуры

#Область include_kedo_base_ПодготовкаДанных_РасчетныйЛисток
#КонецОбласти

#КонецОбласти

#Область КолонкиСостояния

/////********************************************
// КОЛОНКИ СОСТОЯНИ

//Точка Входа - ДобавитьКолонкиВДинамическийСписок


Процедура ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения = Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Сотрудник");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	
	МассивКолонок = Новый Массив;
	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"КЭДО");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".ИндексКартинки, 0)" );
	КолонкаДопТаблицы.Вставить("Заголовок",		"КЭДО");
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок["Saby_Bird"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	//КолонокаДопТаблицы = Новый Структура;
	//КолонокаДопТаблицы.Вставить("Имя",				"КЭДО");
	//КолонокаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".КЭДО, Ложь)");
	//КолонокаДопТаблицы.Вставить("Заголовок",		"КЭДО");
	//КолонокаДопТаблицы.Вставить("ОтображатьНаФорме",Истина);
	//МассивКолонок.Добавить(КолонокаДопТаблицы);

	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Сотрудник")
	ТекстЗапросаКЭДО = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДС.Объект КАК Сотрудник,
	|1 КАК ИндексКартинки,
	|ДС.Значение КАК КЭДО
	|ПОМЕСТИТЬ СвойстваКЭДО
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДС
	|ГДЕ
	|	ДС.Свойство.Имя = ""КЭДО""
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
    |";
	
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("ИмяСпискаНаФорме",	НаименованиеРеквизитаСписок);
	ПарамтерыДопТаблицы.Вставить("ВременнаяТаблица",	ТекстЗапросаКЭДО);
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма, ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;
КонецПроцедуры


//Подготовка структуры объединяемых данных
Процедура ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения		= Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Объект");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	
	МассивКолонок		= Новый Массив;
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"СостояниеКартинка");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние.ИндексКартинки, 10)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"SABY");
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок["Saby_Состояния"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"Состояние");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Состояние SABY");
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Ложь);
	МассивКолонок.Добавить(КолонкаДопТаблицы);

	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"АктивныйЭтап");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".АктивныйЭтап, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Активный этап");
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаСостояния(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Документ")
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"РегистрСведений.Saby_Состояние");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"Saby_Состояние");
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма,	ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкиВДинамическийСписокПриИзмененииЗапроса(Форма, ИмяРеквизитаСписок) Экспорт
	//ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВДинамическийСписок(Форма) Экспорт
	ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	
	//Запрос списка Формы списка справочника сотрудников меняется динамически и от сюда работать не будет
	//Пока закоментирован, Код оставлен для других справочников
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВСправочники(Контекст, НаименованиеРеквизитаСписок) Экспорт 
	Если ОбъектыФормыИзПодсистемыКадры(Контекст) Тогда
		//Сейчас захвачен справочник "Сотрудники", сделано на будущее, когда, будут захвачены другие справочники
		//У справочника сотр
		ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, "Сотрудник");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВДокументы(Контекст, НаименованиеРеквизитаСписок) Экспорт
	Если ОбъектыФормыИзПодсистемыКадры(Контекст) Тогда
		ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, "Сотрудник");
	КонецЕсли;
	ДобавитьКолонкиСтатусаСостояния(Контекст, НаименованиеРеквизитаСписок, "Ссылка");
КонецПроцедуры

Функция ЛевоеПолеСоединенияНайдено(Знач ДоступныеПоля, Знач ПолноеИмяПоля)
	ПолеНайдено 	= Ложь;
	мПолей			= СтрРазделить(ПолноеИмяПоля, ".", Ложь);
	НайденноеПоле	= ДоступныеПоля.Найти(мПолей[0]);
	Если НайденноеПоле <> Неопределено Тогда
		ПолеНайдено		= Истина;
		ВырезаемоеПоле	= мПолей[0] + ?(мПолей.Количество()>0,".","");
		ПолеДляПроверки	= Прав(ПолноеИмяПоля, СтрДлина(ПолноеИмяПоля) - СтрДлина(ВырезаемоеПоле));
		Если Не ПустаяСтрока(ПолеДляПроверки) Тогда
			ПолеНайдено = ЛевоеПолеСоединенияНайдено(НайденноеПоле.Поля, ПолеДляПроверки);
		КонецЕсли;
	КонецЕсли;
	Возврат ПолеНайдено;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ИзменитьЗапросДинамическогоСписока(Контекст, СтруктураПараметров)
	УспешноеВыполнение = Ложь;
	ЭлементФормы				= Контекст.Элементы.Найти(СтруктураПараметров.ИмяСпискаНаФорме);
	Если ЭлементФормы  = Неопределено Тогда
		//Заглушка от падения при переходе по ссылкам формы
		Возврат УспешноеВыполнение;
	Иначе
		Список	= Контекст[СтруктураПараметров.ИмяСпискаНаФорме];
	КонецЕсли;
	Если ТипЗнч(Список) <> Тип("ДинамическийСписок") Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	ОсновнаяТаблица 	= Список.ОсновнаяТаблица;
	
	Схема = Новый СхемаЗапроса();
	Если Найти(Список.ТекстЗапроса, СтруктураПараметров.ТаблицаДанных) = 0 Тогда
		Если НЕ Список.ПроизвольныйЗапрос Тогда
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+"ВЫБРАТЬ * ИЗ " + Список.ОсновнаяТаблица);
		Иначе
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+Список.ТекстЗапроса);
		КонецЕсли;
	Иначе
		Схема.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	КонецЕСли;
	Если Схема.ПакетЗапросов.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	Запрос = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
	Если Запрос.Операторы.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	ОператорВыбрать = Запрос.Операторы[0];
		
	ОсновнойИсточник = Неопределено;
	КорневыеИсточники = ОператорВыбрать.Источники.ПолучитьКорневыеИсточники();
	Для каждого Источник Из КорневыеИсточники Цикл
		Если ТипЗнч(Источник.Источник)=Тип("ТаблицаСхемыЗапроса")
			И ВРег(Источник.Источник.ИмяТаблицы)=ВРег(Список.ОсновнаяТаблица)
			Тогда
			ОсновнойИсточник = Источник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнойИсточник=Неопределено И КорневыеИсточники.Количество() > 0 Тогда
		ОсновнойИсточник = КорневыеИсточники[0];
	КонецЕсли;
	Если ОсновнойИсточник=Неопределено Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	
	ДопТаблицаДанных	= СтруктураПараметров.ТаблицаДанных;
	ПсевдонимДопТаблицы	= СтруктураПараметров.Псевдоним;
	ПостфиксКолонок		= СтруктураПараметров.ПостфиксКолонок;
	
	ИсточникДопДанные	= ОператорВыбрать.Источники.НайтиПоИмени(ДопТаблицаДанных);
	Если ИсточникДопДанные = Неопределено Тогда
		//Обход ошибки повторных вызовов
		ИсточникДопДанные	= ОператорВыбрать.Источники.Добавить(ДопТаблицаДанных, ПсевдонимДопТаблицы);
	КонецЕсли;
	ИсточникДопДанные.Соединения.Очистить();
	
	//Условие = СтрШаблон("%1.Ссылка = ДопДанные.СкладскоеЗадание",ОсновнойИсточник.Источник.Псевдоним);
	Условие = "";
	Для каждого ИменаПолей Из СтруктураПараметров.ПоляСоединения Цикл
		Если Не ЛевоеПолеСоединенияНайдено(ОсновнойИсточник.Источник.ДоступныеПоля, ИменаПолей.Ключ) Тогда
			Возврат УспешноеВыполнение;
		КонецЕсли;
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", "") + СтрШаблон("%1."+ИменаПолей.Ключ+" = "+ПсевдонимДопТаблицы+"."+ИменаПолей.Значение, ОсновнойИсточник.Источник.Псевдоним);
	КонецЦикла;
	
	Если Не ОсновнойИсточник.Соединения.Добавить(ИсточникДопДанные, Условие) Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;

	Соединение					= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения	= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если ОператорВыбрать.ВыбираемыеПоля.Найти(ДопКолонка.ПутьКДанным) = Неопределено Тогда
			Поле				= ОператорВыбрать.ВыбираемыеПоля.Добавить(ДопКолонка.ПутьКДанным);
			Колонка				= Запрос.Колонки.Найти(Поле);
			Колонка.Псевдоним	= ПостфиксКолонок+ДопКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	//Исправление псевдонимов полей СКД после обработки запроса через объект "СхемаЗапроса"
	Для каждого ВыражениеОтбораСКД Из ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных Цикл
		ПсевдонимПоле = СтрНайти(ВыражениеОтбораСКД.Псевдоним, "Поле");
		Если ПсевдонимПоле = 1 Тогда
			ПостфиксПсевдонима = СтрЗаменить(ВыражениеОтбораСКД.Псевдоним, "Поле", "");
			Попытка
				НомерПоля = Число(ПостфиксПсевдонима);
				ВыражениеОтбораСКД.Псевдоним = "";
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Соединение				= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	Список.ТекстЗапроса		= Схема.ПолучитьТекстЗапроса();
	Список.ОсновнаяТаблица	= ОсновнаяТаблица;
	УспешноеВыполнение		= Истина;
	Возврат УспешноеВыполнение;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ДобавитьКолонкиНаФорму(Контекст, СтруктураПараметров)
	КолонкиУспешноДобавлены = Ложь;
	ПостфиксКолонок = СтруктураПараметров.ПостфиксКолонок;
	
	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если Не ДопКолонка.ОтображатьНаФорме Тогда Продолжить; КонецЕсли;
		Попытка
			Если Контекст.Элементы.Найти(ПостфиксКолонок+ДопКолонка.Имя) = Неопределено Тогда
				Элемент = Контекст.Элементы.Добавить(ПостфиксКолонок+ДопКолонка.Имя,Тип("ПолеФормы"),Контекст.Элементы[СтруктураПараметров.ИмяСпискаНаФорме]);
			Иначе
				//Поле уже существует
				Продолжить;
			КонецЕСли;
		Исключение
			КолонкиУспешноДобавлены = Ложь;
			Прервать;
		КонецПопытки;
		Если ДопКолонка.Свойство("Картинка") Тогда 
			Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
			Элемент.Ширина				= 1;
			Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.КартинкаЗначений	= ДопКолонка.Картинка;
		КонецЕсли;
		Элемент.ПутьКДанным			= СтруктураПараметров.ИмяСпискаНаФорме+"."+ПостфиксКолонок+ДопКолонка.Имя;
		Элемент.Заголовок			= ДопКолонка.Заголовок;
		Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
		КолонкиУспешноДобавлены = Истина;
	КонецЦикла;
	Возврат КолонкиУспешноДобавлены; 
КонецФункции

#КонецОбласти

#Область ФильтрыДинамическогоСписка

// Фильтр на форме динамического списка
//Добавляет действия на панель задач формы
Процедура УстановитьФильтры(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт
//Код оставлен на будущее!
//	дСписок	= Форма[НаименованиеРеквизитаСписок];
//	
//	ЭлементОтбора =  дСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеСБИС");
//	ЭлементОтбора.ПравоеЗначение = Неопределено;
//	ЭлементОтбора.Использование = Ложь;
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Раскрасим форму/список 
Процедура УстановитьУсловноеОформление(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт 

КонецПроцедуры

#КонецОбласти 

