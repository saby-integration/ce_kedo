Функция ЭтоФоновоеЗадание() Экспорт
	Возврат ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() <> Неопределено;
КонецФункции

Функция СообщениеПрогресса() Экспорт
	Возврат "СтандартныеПодсистемы.ДлительныеОперации";
КонецФункции

// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Выполняет преобразование (десериализацию) XML-строки в значение.
// См. также ЗначениеВСтрокуXML.
//
// Параметры:
//  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
//
// Возвращаемое значение:
//  Произвольный - значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

// Регистрирует информацию о ходе выполнения длительной операции.
// Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
// не следует сообщать прогресс более 100 раз.
//
// Для того чтобы выводить ход выполнения длительной операции для пользователя, следует установить 
// свойство ВыводитьПрогрессВыполнения в Истина (см. ДлительныеОперацииКлиент.ПараметрыОжидания).
// Его также можно получать отдельно при помощи функции ДлительныеОперации.ПрочитатьПрогресс.
//
// Параметры:
//  Процент                 - Число        - процент выполнения.
//  Текст                   - Строка       - информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - любая дополнительная информация, которую необходимо передать на клиент. 
//                                           Значение должно быть простым (сериализуемым в XML-строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЭтоФоновоеЗадание() Тогда
		Возврат;
	КонецЕсли;
		
	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("Соответствие") Тогда
			ДополнительныеПараметры.Удалить("variables");
		КонецЕсли;
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	ПередаваемыйТекст = ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	
	Текст = "{" + СообщениеПрогресса() + "}" + ПередаваемыйТекст;
	ОбщегоНазначения.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Считывает информацию о ходе выполнения фонового задания и сообщения, которые в нем были сформированы.
//
// Параметры:
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//   Режим                - Строка - "ПрогрессИСообщения", "Прогресс" или "Сообщения".
//
// Возвращаемое значение:
//   Структура:
//    * Прогресс  - Неопределено
//                - Структура - информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
//     ** Процент                 - Число  - необязательный. Процент выполнения.
//     ** Текст                   - Строка - необязательный. Информация о текущей операции.
//     ** ДополнительныеПараметры - Произвольный - необязательный. Любая дополнительная информация.
//    * Сообщения - ФиксированныйМассив - массив объектов СообщениеПользователю, которые были сформированы в фоновом задании.
//
Функция ПрочитатьПрогрессИСообщения(Знач ИдентификаторЗадания, Знач Режим = "ПрогрессИСообщения")
	
	Сообщения = Новый ФиксированныйМассив(Новый Массив);
	Результат = Новый Структура("Сообщения, Прогресс", Сообщения, Неопределено);
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Количество = МассивСообщений.Количество();
	Сообщения = Новый Массив;
	ЧитатьСообщения = (Режим = "ПрогрессИСообщения" Или Режим = "Сообщения"); 
	ЧитатьПрогресс  = (Режим = "ПрогрессИСообщения" Или Режим = "Прогресс"); 
	
	Если ЧитатьСообщения И Не ЧитатьПрогресс Тогда
		Результат.Сообщения = Новый ФиксированныйМассив(МассивСообщений);
		Возврат Результат;
	КонецЕсли;
	
	Для Номер = 0 По Количество - 1 Цикл
		Сообщение = МассивСообщений[Номер];
		
		Если ЧитатьПрогресс И СтрНачинаетсяС(Сообщение.Текст, "{") Тогда
			Позиция = СтрНайти(Сообщение.Текст, "}");
			Если Позиция > 2 Тогда
				ИдентификаторМеханизма = Сред(Сообщение.Текст, 2, Позиция - 2);
				Если ИдентификаторМеханизма = СообщениеПрогресса() Тогда
					ПолученныйТекст = Сред(Сообщение.Текст, Позиция + 1);
					Результат.Прогресс = ЗначениеИзСтрокиXML(ПолученныйТекст);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЧитатьСообщения Тогда
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Сообщения = Новый ФиксированныйМассив(Сообщения);
	Возврат Результат;
	
КонецФункции

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания) Экспорт
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции

Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, 
	Знач ВыводитьСообщения = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки", Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Неопределено);
	Результат.Вставить("Прогресс", Неопределено);
	Результат.Вставить("Сообщения", Неопределено);
	Результат.Вставить("Наименование", Неопределено);
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Пояснение = НСтр("ru = 'Операция не выполнена из-за аварийного завершения фонового задания.
			|Фоновое задание не существует'") + ": " + Строка(ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Пояснение);
		Если ИсключениеПриОшибке Тогда
			ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию.'"));
		КонецЕсли;
		Результат.Статус = "Ошибка";
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Операция не выполнена из-за аварийного завершения фонового задания.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Наименование	= Задание.Наименование;
	Если ВыводитьПрогрессВыполнения Тогда
		ПрогрессИСообщения = ПрочитатьПрогрессИСообщения(ИдентификаторЗадания, ?(ВыводитьСообщения, "ПрогрессИСообщения", "Прогресс"));
		Результат.Прогресс = ПрогрессИСообщения.Прогресс;
		Если ВыводитьСообщения Тогда
			Результат.Сообщения = ПрогрессИСообщения.Сообщения;
		КонецЕсли;
	ИначеЕсли ВыводитьСообщения Тогда
		Результат.Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		//УстановитьПривилегированныйРежим(Истина);
		//Если ПараметрыСеанса.ОтмененныеДлительныеОперации.Найти(ИдентификаторЗадания) = Неопределено Тогда
		//	Результат.Статус = "Ошибка";
		//	Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
		//		Результат.КраткоеПредставлениеОшибки   = НСтр("ru = 'Операция отменена администратором.'");
		//		Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
		//	КонецЕсли;
		//	Если ИсключениеПриОшибке Тогда
		//		Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
		//			ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
		//		Иначе
		//			ТекстСообщения = НСтр("ru = 'Не удалось выполнить данную операцию.'");
		//		КонецЕсли;
		//		ВызватьИсключение ТекстСообщения;
		//	КонецЕсли;
		//Иначе
			Результат.Статус = "Отменено";
		//КонецЕсли;
		//УстановитьПривилегированныйРежим(Ложь);
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
		Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		
		Результат.Статус = "Ошибка";
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Если ИсключениеПриОшибке Тогда
			Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
				ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить данную операцию.'");
			КонецЕсли;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Статус = "Выполнено";
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Экспорт

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);		
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		СообщенияЗадания = Задание.ПолучитьСообщенияПользователю();
		Возврат СообщенияЗадания;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // ПроверитьВыполнениеФоновогоЗадания()

Процедура API_BLOCKLY_RUN_BACKGROUND(ПараметрыВызова) Экспорт
	
	ТранспортБлокли = Обработки.SABY.Создать();
	//Результат загрузки ини файла
	Попытка
		XMLИниФайл	= ТранспортБлокли.Load_ini( ПараметрыВызова["ini_name"], ПараметрыВызова );
		Если ТипЗнч(XMLИниФайл) = Тип("Строка") И Врег(Лев(XMLИниФайл,4)) = "<XML"  Тогда
			Результат = Новый Структура("status, data, LoadIni", "complete", Новый Структура("detail, message", ПараметрыВызова["ini_name"], "ИНИ успешно получен"));
			//результат пердачи объектов, только в случае успешного получения ини файла
			Результат = ТранспортБлокли.API_BLOCKLY_RUN(ПараметрыВызова);
		Иначе
			Результат = Новый Структура("status, data, LoadIni", "error", Новый Структура("detail, message", ПараметрыВызова["ini_name"], XMLИниФайл));
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Ошибка = ТранспортБлокли.ExtExceptionAnalyse(ИнфОбОшибке);
		Результат = Новый структура("data, status", Ошибка, "error");		
	КонецПопытки;
	Saby_ФоновыеЗаданияСервер.СообщитьПрогресс(,,Результат);
КонецПроцедуры 

Процедура API_BLOCKLY_PREDEFINE_BACKGROUND(ПараметрыВызова) Экспорт
	
	ТранспортБлокли = Обработки.SABY.Создать();
	
	ТранспортБлокли.ПриСозданииНовогоПодключения(ПараметрыВызова["connection_info"]);
КонецПроцедуры	

Процедура АвтоматическоеОбновлениеСтатусов(context_params=Неопределено) Экспорт
	
	Если context_params	= Неопределено Тогда
		context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
		Если context_params	= Неопределено Тогда
			ВызватьИсключение("Требуется авторизация");
		КонецЕсли;
	КонецЕсли;

	ПараметрыВызова	= Новый Соответствие();
	ПараметрыВызова.Вставить("params", context_params );
	ПараметрыВызова.Вставить("commands_result",Новый Массив);
	ПараметрыВызова.Вставить("endpoint","");
	ПараметрыВызова.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызова.Вставить("ini_name","ОбновитьСтатусы_send");
	ConnectionId	= Неопределено;
	context_params.Свойство("ConnectionId", ConnectionId);
	ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызова.Вставить("object",Новый Соответствие());
	ПараметрыВызова["object"].Вставить("object", Новый Соответствие());
	
	ОбработкаТранспорт = Обработки.SABY.Создать();
	ОбработкаТранспорт.API_BLOCKLY_RUN(ПараметрыВызова);

КонецПроцедуры