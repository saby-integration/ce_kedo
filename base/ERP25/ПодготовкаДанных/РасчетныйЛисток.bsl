
Функция ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыЗапроса) Экспорт

	ПараметрыВызова = Новый Массив;	

	ФизическиеЛица = Новый СписокЗначений;
	Организации = Новый СписокЗначений;
	Подразделения = Новый СписокЗначений;
	ОрганизацииЗаполнены = Ложь;
	ФизическиеЛицаЗаполнены = Ложь; 
	ПодразделенияЗаполнены = Ложь;
	Если ТипЗнч(ПараметрыЗапроса.ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если НЕ ПараметрыЗапроса.ФизическиеЛица = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
    		ФизическиеЛица.Добавить(ПараметрыЗапроса.ФизическиеЛица);
			ФизическиеЛицаЗаполнены = Истина;	
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыЗапроса.ФизическиеЛица) = Тип("СписокЗначений") Тогда 
		ФизическиеЛица = ПараметрыЗапроса.ФизическиеЛица;
		ФизическиеЛицаЗаполнены = ПараметрыЗапроса.ФизическиеЛица.Количество() > 0;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗапроса.Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если НЕ ПараметрыЗапроса.Организация = Справочники.Организации.ПустаяСсылка() Тогда
    		Организации.Добавить(ПараметрыЗапроса.Организация);
			Если ПараметрыЗапроса.Организация.ОбособленноеПодразделение Тогда
				Организации.Добавить(ПараметрыЗапроса.Организация.ГоловнаяОрганизация);
			КонецЕсли;
			ОрганизацииЗаполнены = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыЗапроса.Организация) = Тип("СписокЗначений") Тогда
		Организации = ПараметрыЗапроса.Организация;
		ОрганизацииЗаполнены = ПараметрыЗапроса.Организация.Количество() > 0;;
	КонецЕсли;
	ПодразделенияВСписке = Истина;
	Если ПараметрыЗапроса.Свойство("Подразделения") Тогда
		Если ТипЗнч(ПараметрыЗапроса.Подразделения) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если НЕ ПараметрыЗапроса.Подразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
	    		Подразделения.Добавить(ПараметрыЗапроса.Подразделения);
				ПодразделенияЗаполнены = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыЗапроса.Подразделения) = Тип("СписокЗначений") Тогда
			Подразделения = ПараметрыЗапроса.Подразделения;
			ПодразделенияЗаполнены = ПараметрыЗапроса.Подразделения.Количество() > 0;;
		КонецЕсли; 
		Если ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеЗаполнено
			ИЛИ ПараметрыЗапроса.ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ПодразделенияВСписке = Ложь
		Иначе
			ПодразделенияВСписке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеРавно
		ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВИерархии
		ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
		ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеЗаполнено
		ИЛИ ПараметрыЗапроса.ВидСравненияОрганизация = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ОрганизацииВСписке = Ложь
	Иначе
		ОрганизацииВСписке = Истина;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеРавно
		ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВИерархии
		ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
		ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеЗаполнено
		ИЛИ ПараметрыЗапроса.ВидСравненияФизическиеЛица = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ФизическиеЛицаВСписке = Ложь
	Иначе
		ФизическиеЛицаВСписке = Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудников
		|		ПО (КадроваяИсторияСотрудников.Сотрудник = Сотрудники.Ссылка)
		|			И (КадроваяИсторияСотрудников.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
		|			И (КадроваяИсторияСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ФизическиеЛицаЗаполнены = ЛОЖЬ
		|				ТОГДА ИСТИНА 
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ФизическиеЛицаВСписке = ИСТИНА
		|						ТОГДА Сотрудники.ФизическоеЛицо В (&ФизическиеЛица)
		|					ИНАЧЕ Сотрудники.ФизическоеЛицо НЕ В (&ФизическиеЛица)
		|				КОНЕЦ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОрганизацииЗаполнены = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ОрганизацииВСписке = ИСТИНА
		|						ТОГДА Сотрудники.ГоловнаяОрганизация В (&Организации)
		|					ИНАЧЕ Сотрудники.ГоловнаяОрганизация НЕ В (&Организации)
		|				КОНЕЦ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ПодразделенияЗаполнены = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ПодразделенияВСписке = ИСТИНА
		|						ТОГДА КадроваяИсторияСотрудников.Подразделение В (&Подразделения)
		|					ИНАЧЕ КадроваяИсторияСотрудников.Подразделение НЕ В (&Подразделения)
		|							ИЛИ КадроваяИсторияСотрудников.Подразделение ЕСТЬ NULL
		|				КОНЕЦ
		|		КОНЕЦ
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ОрганизацииЗаполнены", ОрганизацииЗаполнены);
	Запрос.УстановитьПараметр("ФизическиеЛицаЗаполнены", ФизическиеЛицаЗаполнены); 
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
    Запрос.УстановитьПараметр("ПодразделенияЗаполнены", ПодразделенияЗаполнены);
	Запрос.УстановитьПараметр("ОрганизацииВСписке", ОрганизацииВСписке);
	Запрос.УстановитьПараметр("ПодразделенияВСписке", ПодразделенияВСписке);
	Запрос.УстановитьПараметр("ФизическиеЛицаВСписке", ФизическиеЛицаВСписке);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Попытка
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			УстановитьПривилегированныйРежим(Истина);
			КлючВарианта = ПараметрыЗапроса.КлючВарианта;
			Если КлючВарианта = "РасчетныйЛисток" Тогда
				ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
				Попытка
					Результат = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(   
								ВыборкаДетальныеЗаписи.ФизическоеЛицо,
					            ВыборкаДетальныеЗаписи.ГоловнаяОрганизация,
								ПараметрыЗапроса.НачалоПериода,
								ПараметрыЗапроса.КонецПериода,
								ОтчетРасчетныйЛисток);
				Исключение
					//Начиная с Версии ЗУП 3.1.24.408			
					Результат = ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
								ВыборкаДетальныеЗаписи.ФизическоеЛицо, 
								ВыборкаДетальныеЗаписи.ГоловнаяОрганизация,
								ПараметрыЗапроса.НачалоПериода,
								ПараметрыЗапроса.КонецПериода,
								ОтчетРасчетныйЛисток);
				КонецПопытки;	
				ДокументРезультат = Результат.ДокументРезультат;			
			Иначе
				
				ОтчетОбъектРЛ = Отчеты.АнализНачисленийИУдержаний.Создать();
				ОтчетОбъектРЛ.ИнициализироватьОтчет(КлючВарианта);           
				ВариантОтчета = ВариантыОтчетов.ВариантОтчета(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетОбъектРЛ.Метаданные()), КлючВарианта);
				СхемаКомпоновкиДанных = Отчеты.АнализНачисленийИУдержаний.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
				КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки);
				КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(ВариантОтчета.Настройки.Получить());
		        ОтчетОбъектРЛ.КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки.Получить());
				
				Для каждого ЭлементОтбора Из ОтчетОбъектРЛ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
							ЭлементОтбора.ПравоеЗначение = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
							ЭлементОтбора.Использование = Истина;
							ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						КонецЕсли;
						Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда 
							Если ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда  
								Если ТипЗнч(ЭлементОтбора.ПравоеЗначение[0].Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
									ЭлементОтбора.ПравоеЗначение = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
									ЭлементОтбора.Использование = Истина;
									ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;		
								КонецЕсли;  
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
							Если ТипЗнч(ПараметрыЗапроса.Организация) = Тип("СправочникСсылка.Организации") Тогда
								ЭлементОтбора.ПравоеЗначение = ПараметрыЗапроса.Организация; 
							Иначе
								ЭлементОтбора.ПравоеЗначение = ВыборкаДетальныеЗаписи.ГоловнаяОрганизация;	
							КонецЕсли;
							ЭлементОтбора.Использование = Истина; 
							Если ПараметрыЗапроса.Свойство("ВидСравненияОрганизация") Тогда
								ЭлементОтбора.ВидСравнения = ПараметрыЗапроса.ВидСравненияОрганизация;
							Иначе
								ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ТипЗнч(ЭлементОтбора) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
						Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СтандартныйПериод") Тогда
							ЭлементОтбора.Значение.ДатаНачала = ПараметрыЗапроса.НачалоПериода;
							ЭлементОтбора.Значение.ДатаОкончания = ПараметрыЗапроса.КонецПериода;
					    КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
				МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,,);

				ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
				ВнешниеНаборыДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);

				Результат = Новый ТабличныйДокумент;

				ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
				ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.УстановитьДокумент(Результат);
				//ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
				ОтчетОбъектРЛ.СкомпоноватьРезультат(Результат); 
				Результат.АвтоМасштаб = Истина;
			
				УстановитьПривилегированныйРежим(Ложь);
				
				ДокументРезультат = Результат;
			КонецЕсли;
			
			НазваниеПФ = "Расчетный листок от " + Формат(ПараметрыЗапроса.НачалоПериода, "ДЛФ=Д") + " по " + Формат(ПараметрыЗапроса.КонецПериода, "ДЛФ=Д") + " для " + Строка(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
			Вложение = Новый Соответствие;  
			Вложение["Название"] = НазваниеПФ; 
			
			ПотокВПамяти = Новый ПотокВПамяти;
			ДокументРезультат.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
			ФайлBase64 = Base64Строка(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
						
			//отправка на СБИС Диск
			ИмяФайла = НазваниеПФ + ".pdf";
			context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения(); 
			ОбъектОбработки = Обработки.SABY.Создать();
			СсылкаНаPDF = Неопределено;
			СсылкаНаPDF = ОбъектОбработки.local_helper_convert_to_pdfa_to_disk_x(context_params, ФайлBase64, ИмяФайла);
			//ТипКонтента = ПолучитьКонтентТипВложения(ИмяФайла);
			СсылкаНаСБИСДиск = Saby_Core.get_prop(СсылкаНаPDF, "FileId");
			//отправка на СБИС Диск

			//Прикреплённый файл			
			Вложение["Файл"] = Новый Соответствие;
			Вложение["Файл"].Вставить("Имя", НазваниеПФ+".pdf");
			Вложение["Файл"].Вставить("Ссылка", СсылкаНаСБИСДиск);
			Вложение["Файл"].Вставить("ContentType", "application/pdf");;			
	        МассивВложений = Новый Массив;
			МассивВложений.Добавить(Вложение);
			
			ПараметрыПКД = Новый Структура("Регламент, ЕстьФильтрПоОрганизации, ЕстьФильтрПоСотрудникам, НачалоПериода, КонецПериода, Организация, ФизическоеЛицо, _print_forms",
			saby_core.get_prop(ПараметрыЗапроса,"Регламент"),
			ПараметрыЗапроса.ЕстьФильтрПоОрганизации,
			ПараметрыЗапроса.ЕстьФильтрПоСотрудникам,
			ПараметрыЗапроса.НачалоПериода,
			ПараметрыЗапроса.КонецПериода,
			ВыборкаДетальныеЗаписи.ГоловнаяОрганизация,
			ВыборкаДетальныеЗаписи.ФизическоеЛицо,
			МассивВложений);
			
			ПараметрыВызова.Добавить(ПараметрыПКД); 

		КонецЦикла;	
 	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;	
	
	Возврат ПараметрыВызова;
КонецФункции

