
#Область include_kedo_base_Form_ДокументыКЭДО_УстановитьТекустЗапросаСписка
#КонецОбласти

&НаСервере
Процедура СоздатьКолонкиДинамическогоСписка()
	// Колонка признак наличия вложения	
	Элемент = ЭтаФорма.Элементы.Добавить("Список_ЕстьФайлы",Тип("ПолеФормы"), ЭтаФорма.Элементы.Список );
	Элемент.ПутьКДанным			= "Список.ЕстьФайлы";
	Элемент.Заголовок			= "";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
	Элемент.Ширина				= 1;
	Элемент.КартинкаШапки		= БиблиотекаКартинок["Saby_Скрепка"];
	Элемент.КартинкаЗначений	= БиблиотекаКартинок["КоллекцияСкрепка"];
	ЭтаФорма.Список.УстановитьОбязательноеИспользование("Список_ЕстьФайлы", Истина);
	ЭтаФорма.Элементы.Переместить(Элемент, ЭтаФорма.Элементы.Список, ЭтаФорма.Элементы.СписокОбъект);
	
	// Колонка Организация	
	Элемент = ЭтаФорма.Элементы.Добавить("Список_Организация",Тип("ПолеФормы"), ЭтаФорма.Элементы.Список );
	Элемент.ПутьКДанным			= "Список.Организация";
	Элемент.Заголовок			= "Организация";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
	ЭтаФорма.Список.УстановитьОбязательноеИспользование("Список_Организация", Истина);
	ЭтаФорма.Элементы.Переместить(Элемент, ЭтаФорма.Элементы.Список, ЭтаФорма.Элементы.СписокСостояниеИндексКартинки);
	
	// Колонка Сотрудник	
	Элемент = ЭтаФорма.Элементы.Добавить("Список_Сотрудник",Тип("ПолеФормы"), ЭтаФорма.Элементы.Список );
	Элемент.ПутьКДанным			= "Список.Сотрудник";
	Элемент.Заголовок			= "Сотрудник";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
	ЭтаФорма.Список.УстановитьОбязательноеИспользование("Список_Сотрудник", Истина);
	ЭтаФорма.Элементы.Переместить(Элемент, ЭтаФорма.Элементы.Список, ЭтаФорма.Элементы.СписокСостояниеИндексКартинки);
	
	// Колонка Подразделение	
	Элемент = ЭтаФорма.Элементы.Добавить("Список_Подразделение",Тип("ПолеФормы"), ЭтаФорма.Элементы.Список );
	Элемент.ПутьКДанным			= "Список.Подразделение";
	Элемент.Заголовок			= "Подразделение";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
	ЭтаФорма.Список.УстановитьОбязательноеИспользование("Список_Подразделение", Истина);
	ЭтаФорма.Элементы.Переместить(Элемент, ЭтаФорма.Элементы.Список, ЭтаФорма.Элементы.СписокСостояниеИндексКартинки);
	
	// Колонка ПризнакКЭДО
	Элемент = ЭтаФорма.Элементы.Добавить("Список_ПризнакКЭДО",Тип("ПолеФормы"), ЭтаФорма.Элементы.Список );
	Элемент.ПутьКДанным			= "Список.ПризнакКЭДО";
	Элемент.Заголовок			= "КЭДО";
	//Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
	Элемент.Ширина				= 1;
	//Элемент.КартинкаШапки		= БиблиотекаКартинок["Saby_Bird"];
	Элемент.КартинкаЗначений	= БиблиотекаКартинок["Saby_Bird"];
	ЭтаФорма.Список.УстановитьОбязательноеИспользование("Список_ПризнакКЭДО", Истина);
	ЭтаФорма.Элементы.Переместить(Элемент, ЭтаФорма.Элементы.Список, ЭтаФорма.Элементы.СписокСостояниеИндексКартинки);
	
	Элемент = ЭтаФорма.Элементы.Найти("СписокСостояниеИндексКартинки");
	Если Элемент <> Неопределено Тогда
		Элемент.Заголовок	= ЛокализацияНазваниеПродукта();;
		Элемент.Ширина	= 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиКоманднойПанели()
	ПанельКомандФормы = ЭтаФорма.Элементы.Найти("КоманднаяПанельФормы");
	Если ПанельКомандФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ГруппаКоманд SABY
	НоваяГруппаРодитель = ЭтаФорма.Элементы.Добавить("ГруппаДействияSABY", Тип("ГруппаФормы"), ПанельКомандФормы);
	НоваяГруппаРодитель.Вид = ВидГруппыФормы.ГруппаКнопок;
	НоваяГруппаРодитель.Заголовок = ЛокализацияНазваниеПродукта();

	ЭтаФорма.Команды.ЗагрузитьВSABY.Заголовок = "Загрузить в "+ЛокализацияНазваниеПродукта();
	ЭтаФорма.Команды.ЗагрузитьВSABY.Подсказка = "Загрузить в "+ЛокализацияНазваниеПродукта();
	МояКнопка = ЭтаФорма.Элементы.Добавить("ЗагрузитьВSABY", Тип("КнопкаФормы"), НоваяГруппаРодитель );
	МояКнопка.ИмяКоманды = "ЗагрузитьВSABY";
	МояКнопка.Картинка	= БиблиотекаКартинок["ОтправитьСообщение"];
	МояКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст;
	
	ЭтаФорма.Команды.ВыгрузитьВложенияВSABY.Заголовок = "Выгрузить вложения в 1С";
	ЭтаФорма.Команды.ВыгрузитьВложенияВSABY.Подсказка = "Выгрузить вложения в 1С";
	МояКнопка = ЭтаФорма.Элементы.Добавить("ВыгрузитьВложенияВSABY", Тип("КнопкаФормы"), НоваяГруппаРодитель );
	МояКнопка.ИмяКоманды = "ВыгрузитьВложенияВSABY";
	МояКнопка.Картинка	= БиблиотекаКартинок["Записать"];
	МояКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст;

	ЭтаФорма.Команды.ОткрытьВSABY.Заголовок = "Открыть в "+ЛокализацияНазваниеПродукта();
	ЭтаФорма.Команды.ОткрытьВSABY.Подсказка = "Открыть в "+ЛокализацияНазваниеПродукта();
	МояКнопка = ЭтаФорма.Элементы.Добавить("ОткрытьВSABY", Тип("КнопкаФормы"), НоваяГруппаРодитель );
	МояКнопка.ИмяКоманды = "ОткрытьВSABY";
	МояКнопка.Картинка	= БиблиотекаКартинок["ПерейтиПоВнешнейНавигационнойСсылке"];
	МояКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст;

	ЭтаФорма.Команды.ОбновитьСтатусы.Заголовок = "Обновить статусы";
	ЭтаФорма.Команды.ОбновитьСтатусы.Подсказка = "Обновить статусы";
	МояКнопка = ЭтаФорма.Элементы.Добавить("ОбновитьСтатусы", Тип("КнопкаФормы"), НоваяГруппаРодитель );
	МояКнопка.ИмяКоманды = "ОбновитьСтатусы";
	МояКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры

Процедура  ЗаполнитьСписокСервисов()
	СписокСервисов = Новый СписокЗначений;
	СписокДоменов = СписокСерверовSaby();
	Для Каждого ЗаписьСервиса Из СписокДоменов Цикл
		ЗначениеСервиса =  СтрРазделить(ЗаписьСервиса.Представление, ".");
		ЗаписьСервиса = ЗначениеСервиса[0];
		ЗаписьСервиса = СтрЗаменить(ЗаписьСервиса, "-online", "");
		ЗаписьСервиса = СтрЗаменить(ЗаписьСервиса, "online", "");
		Если 	ПустаяСтрока(ЗаписьСервиса) Тогда
			ЗаписьСервиса = "online";
		КонецЕсли;
		Если Элементы.Сервис.СписокВыбора.НайтиПоЗначению(ЗаписьСервиса) = Неопределено Тогда
			Элементы.Сервис.СписокВыбора.Добавить(ЗаписьСервиса,ЗаписьСервиса);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФильтрЖурналаДокументов(ДанныеФильтра)
	
	Если ТипЗнч(ДанныеФильтра) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ЗаписьФильтра Из ДанныеФильтра Цикл 
		//Структура "Поле, ПравоеЗначение , ВидСравнения"
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЗаписьФильтра.Поле);    
	    ЭлементОтбора.ВидСравнения   = ЗаписьФильтра.ВидСравнения;
	    ЭлементОтбора.Использование  = Истина;
	    ЭлементОтбора.ПравоеЗначение = ЗаписьФильтра.ПравоеЗначение;
	    ЭлементОтбора.Представление  = ЗаписьФильтра.Поле;
		Если Врег(ЗаписьФильтра.Поле) = "СОТРУДНИК" Тогда
			Сотрудник = ЗаписьФильтра.ПравоеЗначение[0];
			СотрудникИспользовать = Не Сотрудник.Пустая();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Функция ПолучитьСБИСПараметры()
	МодульОбъекта = ПолучитьМодульОбъекта();
	saby_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Возврат saby_param;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьТекустЗапросаСписка();
	СоздатьКолонкиДинамическогоСписка();
	СоздатьКнопкиКоманднойПанели();
	ЗаполнитьСписокСервисов();
	
	УстановитьФильтрЖурналаДокументов(get_prop(Параметры, "Фильтр"));
	
	КонтПарам = Неопределено;
	Параметры.Свойство("context_param", КонтПарам);
	Если КонтПарам = Неопределено Тогда
		КонтПарам = ПолучитьСБИСПараметры();
	КонецЕсли;
	Сервис	= get_prop(КонтПарам, "service", "");
	Аккаунт	= get_prop(КонтПарам, "account", "");
	СервисИспользовать	= НЕ ПустаяСтрока(Сервис);
	АккаунтИспользовать	= НЕ ПустаяСтрока(Аккаунт);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект.Список, "Сервис", Сервис, ВидСравненияКомпоновкиДанных.Равно,,СервисИспользовать);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект.Список, "Аккаунт", Аккаунт, ВидСравненияКомпоновкиДанных.Равно,,АккаунтИспользовать);

	ОбъектыМетаданных = Новый Массив;
	МассивДоступныхТипов = Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.Типы();
	Для Каждого ТипИсточника Из МассивДоступныхТипов Цикл
		ОбъектыМетаданных.Добавить( Метаданные.НайтиПоТипу(ТипИсточника) );
	КонецЦикла;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники	= 	ОбъектыМетаданных;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Скрыть ненужные элементы интерфейса
	ЭлПорядокЭлементов = ЭтаФорма.Элементы.Найти("НастройкаПорядкаЭлементов");
	Если ЭлПорядокЭлементов <> Неопределено Тогда 
		ЭлПорядокЭлементов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область МетодыКоманднойПанели

&НаКлиенте
Функция ДанныеИсточника()
	Источник = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		Источник.Добавить( Элементы.Список.ДанныеСтроки(ИдентификаторСтроки).Ссылка );
	КонецЦикла;
	Возврат Источник;
КонецФункции

&НаКлиенте
Функция ПараметрыВызоваКоманды()
	ПараметрКоманды = Новый Структура();
	ПараметрКоманды.Вставить("Источник", ДанныеИсточника());
	ПараметрКоманды.Вставить("ОписаниеКоманды", Новый Структура());
	ПараметрКоманды.ОписаниеКоманды.Вставить("ПараметрыФормы", Новый Структура());
	ПараметрКоманды.ОписаниеКоманды.ПараметрыФормы.Вставить("ИмяИни", Неопределено);
	ПараметрКоманды.Вставить("Форма", ЭтаФорма);
	ПараметрКоманды.Вставить("ЭтоФормаОбъекта", Ложь);
	Возврат ПараметрКоманды;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВложенияВSABY(Команда)
	Saby_КомандыОбменаДляФормыКлиент.ПриНажатииВыгрузитьВложенияИзСБИС(Команда, ПараметрыВызоваКоманды());
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВSABY(Команда)
	Saby_КомандыОбменаДляФормыКлиент.ЗагрузитьВСБИС(Команда, ПараметрыВызоваКоманды());
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОбновитьСтатусы(Команда, ПараметрыВызоваКоманды());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВSABY(Команда)
	Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОткрытьВСБИСПолучитьUID(Команда, ПараметрыВызоваКоманды());
КонецПроцедуры

#КонецОбласти

#Область МетодыФормы

&НаКлиенте
Процедура ОрганизацияИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Организация", Организация, ОрганизацияИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Сотрудник", Сотрудник, СотрудникИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Состояние", СтатусДокумента, СтатусДокументаИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Подразделение", Подразделение, ПодразделениеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура АккаунтИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Аккаунт", Аккаунт, АккаунтИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СервисИспользоватьПриИзменении(Элемент)
	УстановитьФильтр("Сервис", Сервис, СервисИспользовать);
КонецПроцедуры



&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияИспользовать = Истина И НЕ Организация.Пустая();
	УстановитьФильтр("Организация", Организация, ОрганизацияИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникИспользовать = Истина И НЕ Сотрудник.Пустая();
	УстановитьФильтр("Сотрудник", Сотрудник, СотрудникИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПриИзменении(Элемент)
	СтатусДокументаИспользовать = Истина И НЕ СтатусДокумента.Пустая(); 
	УстановитьФильтр("Состояние", СтатусДокумента, СтатусДокументаИспользовать);
КонецПроцедуры


&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеИспользовать = Истина И НЕ Подразделение.Пустая();; 
	УстановитьФильтр("Подразделение", Подразделение, ПодразделениеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура АккаунтПриИзменении(Элемент)
	АккаунтИспользовать = Истина И НЕ ПустаяСтрока(Аккаунт); 
	УстановитьФильтр("Аккаунт", Аккаунт, АккаунтИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	СервисИспользовать = Истина И НЕ ПустаяСтрока(Сервис); 
	УстановитьФильтр("Сервис", Сервис, СервисИспользовать);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФильтр(Реквизит, ПравоеЗначение, Использование, ВидСравнения = Неопределено)
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект.Список, Реквизит, ПравоеЗначение,ВидСравнения,,Использование);
КонецПроцедуры

#КонецОбласти

#Область МетодыСписка

#Область include_kedo_base_Form_ДокументыКЭДО_СписокПриАктивизацииСтроки
#КонецОбласти

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_Helpers_НастройкиПодключенияСписокДоменов
#КонецОбласти


#Область include_core_base_Helpers_FormGetters
#КонецОбласти

